#+TITLE: Desktop Environment

#+PROPERTY: header-args :mkdirp yes
#+PROPERTY: header-args:sh   :tangle-mode (identity #o555)
#+PROPERTY: header-args:conf :tangle-mode (identity #o555)

Desktop configuration mostly lifted from daviwil, needing some edits

* System Settings
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       e17037c6-caeb-43aa-a9b7-d2dd6ebde19a
:END:

Load system-specific settings from =.emacs.d/per-system-settings.el= and unpack relevant values into blocks so that they can be used in configuration file blocks.  These settings are configured in [[file:Systems.org::*Per-System Settings][Systems.org]].

#+NAME: system-settings
#+begin_src emacs-lisp :session system-settings
;; (load-file "~/.doom.d/per-system-settings.el")
#+end_src

#+NAME: get-setting
#+begin_src emacs-lisp :var name="nil" :session system-settings
(nanjigen/system-settings-get (intern name))
#+end_src

* Fonts and Themes
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       6a1ed333-6391-4c59-816f-0975dab66d9d
:END:

I use [[https://github.com/derat/xsettingsd][xsettingsd]] as a minimal settings daemon for Xorg applications.  It replaces similar daemons from desktop environments like GNOME and XFCE and enables me to use a simple configuration file like the following:

#+begin_src conf :tangle ~/.config/xsettingsd/xsettingsd.conf :noweb yes

Net/ThemeName "Matcha-dark-azul"
Net/IconThemeName "Papirus-Dark"
Gtk/DecorationLayout "menu:minimize,maximize,close"
Gtk/FontName "Cantarell 11"
Gtk/MonospaceFontName "Fira Mono 10"
Gtk/CursorThemeName "Ananjigenaita"
Xft/Antialias 1
Xft/Hinting 0
Xft/HintStyle "hintnone"
# Xft/DPI <<dpi()>> # 1024 * DPI

#+end_src

I also have to do an extra step to make sure Emacs can find the font path from the "desktop" profile.

#+begin_src xml :tangle ~/.config/fontconfig/fonts.conf

<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <dir>~/.dotfiles/fonts</dir>
  <dir>~/.guix-extra-profiles/desktop/desktop/share/fonts</dir>
  <alias>
    <family>Apple Color Emoji</family>
    <prefer>
      <family>Noto Color Emoji</family>
    </prefer>
  </alias>
</fontconfig>

#+end_src

*DPI*

#+NAME: dpi
#+begin_src emacs-lisp :session=system-settings :var settings=system-settings
;; (* 1024 (alist-get 'desktop/dpi nanjigen/system-settings))
#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

;; Settings Manager
"xsettingsd"

;; GTK Themes
"arc-icon-theme"
"matcha-theme"
"hicolor-icon-theme"
"gnome-icon-theme"
"gnome-backgrounds"
"papirus-icon-theme"
"breeze-icons"

;; Fonts
"font-fira-code"
"font-fira-mono"
"font-jetbrains-mono"
"font-iosevka"
"font-iosevka-aile"
"font-abattis-cantarell"
"font-dejavu"
"font-gnu-freefont"
"font-liberation"
"font-awesome"
"font-google-material-design-icons"
"font-google-roboto"
"gs-fonts"

;;; Japanese Fonts
"font-google-noto"
"font-adobe-source-han-sans"
"font-ipa-mj-mincho"
#+end_src

* Desktop Notifications via Dunst
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       296c851d-e557-446b-ba51-879e4622f612
:END:

[[https://dunst-project.org/][Dunst]] is a minimal interface for displaying desktop notifications.  It is quite hackable but I'm not currently taking much advantage of its power.  One useful feature is the ability to recall notification history; the keybinding is =C-`= in my configuration (though I'd prefer if I could invoke it from an Emacs keybinding somehow).

#+begin_src conf :tangle ~/.config/dunst/dunstrc :noweb yes

[global]
    ### Display ###
    monitor = 0

    # The geometry of the window:
    #   [{width}]x{height}[+/-{x}+/-{y}]
    geometry = "500x10-10+50"

    # Show how many messages are currently hidden (because of geometry).
    indicate_hidden = yes

    # Shrink window if it's smaller than the width.  Will be ignored if
    # width is 0.
    shrink = no

    # The transparency of the window.  Range: [0; 100].
    transparency = 10

    # The height of the entire notification.  If the height is smaller
    # than the font height and padding combined, it will be raised
    # to the font height and padding.
    notification_height = 0

    # Draw a line of "separator_height" pixel height between two
    # notifications.
    # Set to 0 to disable.
    separator_height = 1
    separator_color = frame

    # Padding between text and separator.
    padding = 8

    # Horizontal padding.
    horizontal_padding = 8

    # Defines width in pixels of frame around the notification window.
    # Set to 0 to disable.
    frame_width = 2

    # Defines color of the frame around the notification window.
    frame_color = "#89AAEB"

    # Sort messages by urgency.
    sort = yes

    # Don't remove messages, if the user is idle (no mouse or keyboard input)
    # for longer than idle_threshold seconds.
    idle_threshold = 120

    ### Text ###

    font = Cantarell <<get-setting(name="dunst/font-size")>>

    # The spacing between lines.  If the height is smaller than the
    # font height, it will get raised to the font height.
    line_height = 0
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    format = "<b>%s</b>\n%b"

    # Alignment of message text.
    # Possible values are "left", "center" and "right".
    alignment = left

    # Show age of message if message is older than show_age_threshold
    # seconds.
    # Set to -1 to disable.
    show_age_threshold = 60

    # Split notifications into multiple lines if they don't fit into
    # geometry.
    word_wrap = yes

    # When word_wrap is set to no, specify where to make an ellipsis in long lines.
    # Possible values are "start", "middle" and "end".
    ellipsize = middle

    # Ignore newlines '\n' in notifications.
    ignore_newline = no

    # Stack together notifications with the same content
    stack_duplicates = true

    # Hide the count of stacked notifications with the same content
    hide_duplicate_count = false

    # Display indicators for URLs (U) and actions (A).
    show_indicators = yes

    ### Icons ###

    # Align icons left/right/off
    icon_position = left

    # Scale larger icons down to this size, set to 0 to disable
    max_icon_size = <<get-setting(name="dunst/max-icon-size")>>

    # Paths to default icons.
    icon_path = /home/nanjigen/.guix-extra-profiles/desktop/desktop/share/icons/gnome/256x256/status/:/home/nanjigen/.guix-extra-profiles/desktop/desktop/share/icons/gnome/256x256/devices/:/home/nanjigen/.guix-extra-profiles/desktop/desktop/share/icons/gnome/256x256/emblems/

    ### History ###

    # Should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    sticky_history = no

    # Maximum amount of notifications kept in history
    history_length = 20

    ### Misc/Advanced ###

    # Browser for opening urls in context menu.
    browser = qutebrowser

    # Always run rule-defined scripts, even if the notification is suppressed
    always_run_script = true

    # Define the title of the windows spawned by dunst
    title = Dunst

    # Define the class of the windows spawned by dunst
    class = Dunst

    startup_notification = false
    verbosity = mesg

    # Define the corner radius of the notification window
    # in pixel size. If the radius is 0, you have no rounded
    # corners.
    # The radius will be automatically lowered if it exceeds half of the
    # notification height to avoid clipping text and/or icons.
    corner_radius = 4

    mouse_left_click = close_current
    mouse_middle_click = do_action
    mouse_right_click = close_all

# Experimental features that may or may not work correctly. Do not expect them
# to have a consistent behaviour across releases.
[experimental]
    # Calculate the dpi to use on a per-monitor basis.
    # If this setting is enabled the Xft.dpi value will be ignored and instead
    # dunst will attempt to calculate an appropriate dpi value for each monitor
    # using the resolution and physical size. This might be useful in setups
    # where there are multiple screens with very different dpi values.
    per_monitor_dpi = false

[shortcuts]

    # Shortcuts are specified as [modifier+][modifier+]...key
    # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
    # "mod3" and "mod4" (windows-key).
    # Xev might be helpful to find names for keys.

    # Close notification.
    #close = ctrl+space

    # Close all notifications.
    #close_all = ctrl+shift+space

    # Redisplay last message(s).
    # On the US keyboard layout "grave" is normally above TAB and left
    # of "1". Make sure this key actually exists on your keyboard layout,
    # e.g. check output of 'xmodmap -pke'
    history = ctrl+grave

    # Context menu.
    context = ctrl+shift+period

[urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    background = "#222222"
    foreground = "#888888"
    timeout = 10
    # Icon for notifications with low urgency, uncomment to enable
    #icon = /path/to/icon

[urgency_normal]
    background = "#1c1f26"
    foreground = "#ffffff"
    timeout = 10
    # Icon for notifications with normal urgency, uncomment to enable
    #icon = /path/to/icon

[urgency_critical]
    background = "#900000"
    foreground = "#ffffff"
    frame_color = "#ff0000"
    timeout = 0
    # Icon for notifications with critical urgency, uncomment to enable
    #icon = /path/to/icon

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"dunst"
"libnotify"  ; For notify-send

#+end_src

* Panel via Polybar
:PROPERTIES:
:CREATED:  [2021-10-16 Sat 11:04]
:ID:       f230137b-f85f-4b87-86dc-d3d212106655
:END:

I use [[https://github.com/polybar/polybar][Polybar]] to display a panel at the top of the primary screen to display my current EXWM workspace, CPU usage and temperature, battery status, time, and system tray.  It uses some custom hooks back into Emacs via =emacsclient=.

#+begin_src conf :tangle ~/.config/polybar/config :noweb yes

; Docs: https://github.com/polybar/polybar
;==========================================================

[settings]
screenchange-reload = true

[global/wm]
margin-top = 0
margin-bottom = 0

[colors]
background = #f0232635
background-alt = #576075
foreground = #A6Accd
foreground-alt = #555
primary = #ffb52a
secondary = #e60053
alert = #bd2c40
underline-1 = #c792ea

[bar/panel]
width = 100%
height = <<get-setting(name="polybar/height")>>
offset-x = 0
offset-y = 0
fixed-center = true
enable-ipc = true

background = ${colors.background}
foreground = ${colors.foreground}

line-size = 2
line-color = #f00

border-size = 0
border-color = #00000000

padding-top = 5
padding-left = 1
padding-right = 1

module-margin = 1

font-0 = "Cantarell:size=<<get-setting(name="polybar/font-0-size")>>:weight=bold;2"
font-1 = "Font Awesome:size=<<get-setting(name="polybar/font-1-size")>>;2"
font-2 = "Material Icons:size=<<get-setting(name="polybar/font-2-size")>>;5"
font-3 = "Fira Mono:size=<<get-setting(name="polybar/font-3-size")>>;-3"

modules-left = exwm exwm-path
modules-center = spotify
modules-right = telegram mu4e cpu temperature battery date

tray-position = right
tray-padding = 2
tray-maxsize = 28

cursor-click = pointer
cursor-scroll = ns-resize

[module/exwm]
type = custom/ipc
hook-0 = emacsclient -e "(nanjigen/polybar-exwm-workspace)" | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-underline = ${colors.underline-1}
format-background = ${colors.background-alt}
format-padding = 1

[module/exwm-path]
type = custom/ipc
hook-0 = emacsclient -e "(nanjigen/polybar-exwm-workspace-path)" | sed -e 's/^"//' -e 's/"$//'
format-foreground = #f78c6c
initial = 1

[module/spotify]
type = custom/script
exec = ~/.config/polybar/player-status.sh
interval = 3

[module/mu4e]
type = custom/ipc
hook-0 = emacsclient -e '(nanjigen/polybar-mail-count 500)' | sed -e 's/^"//' -e 's/"$//'
initial = 1
format-underline = ${colors.underline-1}
click-left = emacsclient -e '(nanjigen/go-to-inbox)'

; [module/telegram]
; type = custom/ipc
; hook-0 = emacsclient -e '(nanjigen/polybar-telegram-chats)' | sed -e 's/^"//' -e 's/"$//'
; format-padding = 3
; initial = 1

[module/xkeyboard]
type = internal/xkeyboard
blacklist-0 = num lock

format-prefix-font = 1
format-prefix-foreground = ${colors.foreground-alt}
format-prefix-underline = ${colors.underline-1}

label-layout = %layout%
label-layout-underline = ${colors.underline-1}

label-indicator-padding = 2
label-indicator-margin = 1
label-indicator-underline = ${colors.underline-1}

[module/cpu]
type = internal/cpu
interval = 2
format = <label> <ramp-coreload>
format-underline = ${colors.underline-1}
click-left = emacsclient -e "(proced)"
label = %percentage:2%%
ramp-coreload-spacing = 0
ramp-coreload-0 = ▁
ramp-coreload-0-foreground = ${colors.foreground-alt}
ramp-coreload-1 = ▂
ramp-coreload-2 = ▃
ramp-coreload-3 = ▄
ramp-coreload-4 = ▅
ramp-coreload-5 = ▆
ramp-coreload-6 = ▇

[module/memory]
type = internal/memory
interval = 2
format-prefix = "M:"
format-prefix-foreground = ${colors.foreground-alt}
format-underline = ${colors.underline-1}
label = %percentage_used%%

[module/date]
type = internal/date
interval = 5

date = "W%U: %a %b %e"
date-alt = "%A %B %d %Y"

time = %l:%M %p
time-alt = %H:%M:%S

format-prefix-foreground = ${colors.foreground-alt}
format-underline = ${colors.underline-1}

label = %date% %time%

[module/battery]
type = internal/battery
battery = BAT0
adapter = ADP1
full-at = 98
time-format = %-l:%M

label-charging = %percentage%% / %time%
format-charging = <animation-charging> <label-charging>
format-charging-underline = ${colors.underline-1}

label-discharging = %percentage%% / %time%
format-discharging = <ramp-capacity> <label-discharging>
format-discharging-underline = ${self.format-charging-underline}

format-full = <ramp-capacity> <label-full>
format-full-underline = ${self.format-charging-underline}

ramp-capacity-0 = 
ramp-capacity-1 = 
ramp-capacity-2 = 
ramp-capacity-3 = 
ramp-capacity-4 = 

animation-charging-0 = 
animation-charging-1 = 
animation-charging-2 = 
animation-charging-3 = 
animation-charging-4 = 
animation-charging-framerate = 750

[module/temperature]
type = internal/temperature
thermal-zone = 0
warn-temperature = 60

format = <label>
format-underline = ${colors.underline-1}
format-warn = <label-warn>
format-warn-underline = ${self.format-underline}

label = %temperature-c%
label-warn = %temperature-c%!
label-warn-foreground = ${colors.secondary}

#+end_src

I created a simple script to grab Spotify player information using =playerctl=:

#+begin_src sh :tangle ~/.config/polybar/player-status.sh :shebang #!/bin/sh

status="$(playerctl -p spotify status 2>&1)"
if [ "$status" != "No players found" ]
then
  artist="$(playerctl -p spotify metadata artist)"
  if [ "$artist" != "" ]
  then
    echo " $(playerctl -p spotify metadata artist) - $(playerctl -p spotify metadata title)"
  else
    # Clear any string that was previously displayed
    echo ""
  fi
else
  # Clear any string that was previously displayed
  echo ""
fi

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"polybar"

#+end_src

** Desktop Configuration
:PROPERTIES:
:CREATED:  [2021-11-13 Sat 11:38]
:ID:       e0ffad02-0ae8-4b82-a66b-897c5aeae524
:END:

#+begin_src emacs-lisp :tangle ~/.doom.d/modules/desktop/exwm/+desktop.el

(defun nanjigen/run-xmodmap ()
  (interactive)
  (start-process-shell-command "xmodmap" nil "xmodmap ~/.dotfiles/.config/i3/Xmodmap"))

(defun nanjigen/update-wallpapers ()
  (interactive)
  (start-process-shell-command
   "feh" nil
   (format "feh --bg-scale ~/.dotfiles/backgrounds/%s" (alist-get 'desktop/background nanjigen/system-settings))))

(setq nanjigen/panel-process nil)
(defun nanjigen/kill-panel ()
  (interactive)
  (when nanjigen/panel-process
    (ignore-errors
      (kill-process nanjigen/panel-process)))
  (setq nanjigen/panel-process nil))

(defun nanjigen/start-panel ()
  (interactive)
  (nanjigen/kill-panel)
  (setq nanjigen/panel-process (start-process-shell-command "polybar" nil "polybar panel")))

(defun nanjigen/update-screen-layout ()
  (interactive)
  (let ((layout-script "~/.bin/update-screens"))
     (message "Running screen layout script: %s" layout-script)
     (start-process-shell-command "xrandr" nil layout-script)))

(defun nanjigen/configure-desktop ()
  (interactive)
    (nanjigen/run-xmodmap)
    (nanjigen/update-screen-layout)
    (run-at-time "2 sec" nil (lambda () (nanjigen/update-wallpapers))))

(defun nanjigen/on-exwm-init ()
  (nanjigen/configure-desktop)
  (nanjigen/start-panel))

;; (when nanjigen/exwm-enabled
;;   ;; Configure the desktop for first load
;;   (add-hook 'exwm-init-hook #'nanjigen/on-exwm-init))

#+end_src

** Panel
:PROPERTIES:
:CREATED:  [2021-11-13 Sat 11:38]
:ID:       47c59749-c9a0-486f-92fa-005afce53ee3
:END:

#+begin_src emacs-lisp :tangle ~/.doom.d/modules/desktop/exwm/+desktop.el
;;; desktop/exwm/+desktop.el -*- lexical-binding: t; -*-

(defun nanjigen/send-polybar-hook (name number)
  (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" name number)))

(defun nanjigen/update-polybar-exwm (&optional path)
  (nanjigen/send-polybar-hook "exwm" 1)
  (nanjigen/send-polybar-hook "exwm-path" 1))

;; (defun nanjigen/update-polybar-telegram ()
;;   (nanjigen/send-polybar-hook "telegram" 1))

(defun nanjigen/polybar-exwm-workspace ()
  (pcase exwm-workspace-current-index
    (0 "")
    (1 "")
    (2 "")
    (3 "")
    (4 "")))

(defun nanjigen/polybar-exwm-workspace-path ()
  (let ((workspace-path (frame-parameter nil 'bufler-workspace-path-formatted)))
    (if workspace-path
        (substring-no-properties workspace-path)
      "")))

(defun nanjigen/polybar-mail-count (max-count)
  (if (and nanjigen/mail-enabled nanjigen/mu4e-inbox-query)
    (let* ((mail-count (shell-command-to-string
                         (format "mu find --nocolor -n %s \"%s\" | wc -l" max-count nanjigen/mu4e-inbox-query))))
      (format " %s" (string-trim mail-count)))
    ""))

(defun nanjigen/telega-normalize-name (chat-name)
  (let* ((trimmed-name (string-trim-left (string-trim-right chat-name "}") "◀{"))
         (first-name (nth 0 (split-string trimmed-name " "))))
    first-name))

(defun nanjigen/propertized-to-polybar (buffer-name)
  (if-let* ((text (substring-no-properties buffer-name))
            (fg-face (get-text-property 0 'face buffer-name))
            (fg-color (face-attribute fg-face :foreground)))
    (format "%%{F%s}%s%%{F-}" fg-color (nanjigen/telega-normalize-name text))
    text))

;; (defun nanjigen/polybar-telegram-chats ()
;;   (if (> (length tracking-buffers) 0)
;;     (format " %s" (string-join (mapcar 'nanjigen/propertized-to-polybar tracking-buffers) ", "))
;;     ""))

(add-hook 'exwm-workspace-switch-hook #'nanjigen/update-polybar-exwm)
(add-hook 'bufler-workspace-set-hook #'nanjigen/update-polybar-exwm)

#+end_src


* Automatic Disk Mounting with Udiskie
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       c111674c-0ad4-41a8-a4bc-51706c0df2d7
:END:

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"udiskie"

#+end_src

* Default Applications
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       74c87dcd-4869-408a-b0f9-b83c5450d949
:END:

The file =~/.config/mimeapps.list= configures default applications for various content types.  Right now I'm using it to control which browser opens URLs from other applications.

#+begin_src conf :tangle ~/.config/mimeapps.list

  [Default Applications]
  text/html=firefox.desktop
  x-scheme-handler/http=firefox.desktop
  x-scheme-handler/https=firefox.desktop
  x-scheme-handler/about=firefox.desktop
  x-scheme-handler/unknown=firefox.desktop
  x-scheme-handler/org-protocol=org-protocol.desktop
  application/pdf=emacsclient.desktop;mupdf.desktop;libreoffice-draw.desktop

#+end_src

* User Services
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       5d712d72-2f6a-4e02-9f77-062512443956
:END:

I use [[https://www.gnu.org/software/shepherd/][GNU Shepherd]] to manage services that run in the background when I log in.

#+begin_src scheme :tangle ~/.config/shepherd/init.scm

(define gpg-agent
  (make <service>
    #:provides '(gpg-agent)
    #:respawn? #t
    #:start (make-system-constructor "gpg-connect-agent /bye")
    #:stop (make-system-destructor "gpgconf --kill gpg-agent")))

(define mcron
  (make <service>
    #:provides '(mcron)
    #:respawn? #t
    #:start (make-forkexec-constructor '("mcron"))
    #:stop  (make-kill-destructor)))

(define syncthing
  (make <service>
    #:provides '(syncthing)
    #:respawn? #t
    #:start (make-forkexec-constructor '("syncthing" "-no-browser"))
    #:stop  (make-kill-destructor)))

(define pulseaudio
  (make <service>
    #:provides '(pulseaudio)
    #:respawn? #t
    #:start (make-forkexec-constructor '("pulseaudio"))
    #:stop  (make-kill-destructor)))

(register-services gpg-agent mcron syncthing pulseaudio)
(action 'shepherd 'daemonize)

;; Start user services
(for-each start '(gpg-agent mcron syncthing pulseaudio))

#+end_src

* Scheduled Tasks
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       a3443352-278d-4f3a-a70d-b267e67c17a1
:END:

I use [[https://www.gnu.org/software/mcron/][GNU mcron]] for scheduling tasks to run periodically in the background.

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"mcron"

#+end_src

** TODO setup Guix battery notification
:PROPERTIES:
:CREATED:  [2022-02-25 Fri 18:13]
:ID:       30df41e6-c098-4e8f-ba5c-164b3cd7ac5e
:END:
https://guix.gnu.org/zh-CN/manual/en/html_node/Scheduled-Job-Execution.html
Using mcron

* Applications
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       e52ef51e-6f8d-40bb-84cc-ed6b529741df
:END:

** Browsers
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       0adab059-07d5-444a-85a6-e072e55a7bf1
:END:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"nyxt"

#+end_src

*** nyxt
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 16:04]
:ID:       d8324ada-b16a-48f2-ab9a-f92f023d69ba
:END:

** Password Management
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       7c10e52c-8e0e-42bc-980e-af048a02dce9
:END:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"password-store"

#+end_src

** Audio Device Control
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       f002285a-4de2-4b08-bf55-f827c4edbe28
:END:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"alsa-utils"
"pavucontrol"

#+end_src

** Media Players
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       bd06b4d3-0009-4c6e-a556-0894e8bb2fff
:END:

*** TODO rewrite mpv config in fennel
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       3a0bba28-68c7-4966-a1a7-214978fadda3
:END:

[[https://mpv.io/][mpv]] is a simple yet powerful video player.  Paired with [[http://ytdl-org.github.io/youtube-dl/][youtube-dl]] it can even stream YouTube videos.  [[https://github.com/hoyon/mpv-mpris][mpv-mpris]] allows playback control via [[https://github.com/altdesktop/playerctl][playerctl]].

#+begin_src conf :tangle ~/.config/mpv/mpv.conf :noweb yes

# Configure playback quality
vo=gpu
hwdec=vaapi
profile=gpu-hq
scale=ewa_lanczossharp
cscale=ewa_lanczossharp

# Start the window in the upper right screen corner
geometry=22%-30+20

# Save video position on quit
save-position-on-quit

# Enable control by MPRIS
script=~/.guix-extra-profiles/desktop/desktop/lib/mpris.so

# Limit the resolution of YouTube videos
ytdl=yes
ytdl-format=bestvideo[height<=?720]+bestaudio/best

# When playing audio files, display the album art
audio-display=attachment

# Keep the player open after the file finishes
keep-open

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"mpv"
"mpv-mpris"
"youtube-dl"
"playerctl"

#+end_src

*** Codecs and Drivers
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       9ebfe5cc-204b-4588-ba1e-a36e283f1664
:END:

These packages are needed to enable many video formats to be played in browsers and video players.  VAAPI drivers are also used to enable hardware-accelerated video decoding.

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"gstreamer"
"gst-plugins-base"
"gst-plugins-good"
"gst-plugins-bad"
"gst-plugins-ugly"
"gst-libav"
"libva-utils"
"ffmpeg"

#+end_src

** Image Viewers and Editors
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       aa9e6c67-7555-4dd7-a3ee-735330f816d9
:END:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"feh"
"gimp"
"scrot"

#+end_src

** Document Readers
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       55bbc078-10fe-4474-9d5d-6f698069c63c
:END:

I use ~emacs-pdf-tools~ extensively. Installing it via ~guix~ takes care of building everything much more reliably than as a ~straight~ package.

~Libreoffice~ for dealing with the odd non-text document.
*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"emacs-pdf-tools"

#+end_src

** Syncthing
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       fec6c914-f377-40d4-8a59-b9baac602278
:END:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"syncthing"
"syncthing-gtk"

#+end_src

** Flatpak
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       39571a84-622b-4817-8e0f-56d1d19a6201
:END:

I use Flatpak and the [[https://flathub.org/home][Flathub]] repository to install applications that are otherwise difficult to install in Guix because of application frameworks, etc.

*Applications to Install*

#+begin_src sh

# flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
# flatpak remote-add --user --if-not-exists flathub-beta https://flathub.org/beta-repo/flathub-beta.flatpakrepo
# flatpak install --user flathub com.spotify.Client
# flatpak install --user flathub com.valvesoftware.Steam
# flatpak install --user flathub com.microsoft.Teams
# flatpak install --user flathub com.discordapp.Discord
# flatpak install --user flathub-beta com.obsproject.Studio

#+end_src

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"flatpak"

#+end_src

** Printing
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       09bc7c8b-8419-47a5-8b14-999723b6f0d1
:END:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"system-config-printer"

#+end_src

** Desktop Tools
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       d7dd2e0c-d13c-4a9d-aa0d-550a8f58642b
:END:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"compton"
"redshift"
"gucharmap"
"fontmanager"
"brightnessctl"
"xdg-utils"      ;; For xdg-open, etc
"xdg-dbus-proxy" ;; For Flatpak
"gtk+:bin"       ;; For gtk-launch
"glib:bin"       ;; For gio-launch-desktop
"shared-mime-info"

#+end_src

** System Tools
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       f060d6b1-d5be-41fd-af19-e4263f5cf33b
:END:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"openssh"
"zip"
"unzip"

#+end_src

** Xorg Tools
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       5660e7af-f72b-4493-8dec-d18eb96655c6
:END:

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""

"xev"
"xset"
"xrdb"
"xhost"
"xmodmap"
"setxkbmap"
"xrandr"
"arandr"
"xss-lock"
"libinput"
"xinput"

#+end_src

* Desktop Profile
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       360bce0b-a9c5-4065-85c1-c89763373bce
:END:

The =desktop.scm= manifest holds the list of packages that I use to configure my desktop environment.  The package names are pulled from the relevant sections titled *Guix Packages* in this file (=Desktop.org=).

*~/.config/guix/manifests/desktop.scm:*

#+begin_src scheme :tangle ~/.config/guix/manifests/desktop.scm :noweb yes

(specifications->manifest
 '(
   <<packages>>
))

#+end_src

* Notes
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       a2c19b8d-6796-4555-af76-a07e29df7d37
:END:

** Bluetooth Setup
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:54]
:ID:       3450b3f1-986e-4f9c-afa6-ab0889ecd830
:END:

If you need to manually connect to Bluetooth audio devices using =bluetoothctl=,
as I currently do in Guix, you'll need to enter these commands at the
=bluetoothctl= prompt:

#+begin_src shell

  system-alias "my-hostname" # To configure your laptop's device name
  default-agent
  power on
  scan on
  # Wait for your device to appear
  pair 04:52:C7:5E:5C:A8
  trust 04:52:C7:5E:5C:A8 # To enable auto-connect
  connect 04:52:C7:5E:5C:A8

#+end_src
