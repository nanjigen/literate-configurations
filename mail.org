#+TITLE: Mail and Emacs
#+PROPERTY: header-args :mkdirp yes

* PROJECT Setup mu4e in emacs
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       d8343324-2695-42e4-882d-2d147e7627b5
:header-args:elisp: :tangle ~/.doom.d/+mail.el
:END:
https://github.com/seanfarley/mu4e-patch/blob/master/README.org
https://github.com/org-mime/org-mime

A large portion of my mu4e config is taken from [[https://github.com/lepisma/rogue/tree/master/local/r-mu4e][lepisma's r-mu4e]] and Ambrevar's [[https://gitlab.com/ambrevar/dotfiles/-/blob/master/.emacs.d/lisp/init-mu4e.el][config]].

** NEXT Rework blocks into sections/TODO
:PROPERTIES:
:CREATED:  [2022-02-12 Sat 14:57]
:ID:       cb4fb1b0-be96-42fb-b004-9610c85d0351
:END:
#+begin_src elisp
;;; $DOOMDIR/+mail.el -*- lexical-binding: t; -*-

#+end_src

We use ~:defer~ here so that we can give the mail address secrets to load later on.

#+begin_src elisp

;; configure email
(use-package! mu4e
  :defer 20
  :init
  (setq mu4e-maildir "~/.mail"
        mu4e-get-mail-command "mbsync -Va"
        mu4e-update-interval (* 10 60)
        message-kill-buffer-on-exit t
        ;; mu4e-headers-auto-update nil ; no refresh cos lose current filter
        mu4e-change-filenames-when-moving t ; Preferred for mbsync according to man page.
        )
        ;; Don't bother me with context on startup
        ;; mu4e-context-policy nil

        ;; Attachments
        ;; Use Ivy for mu4e completions (maildir folders, etc)
        (setq mu4e-completing-read-function #'completing-read)
        ;; mu4e-attachment-dir "~/Downloads"
        ;; mu4e-save-multiple-attachments-without-asking t
        ;; mu4e-compose-signature-auto-include nil)

  ;; Display
  (setq message-yank-prefix "")
  (setq message-yank-cited-prefix "")
  (setq message-yank-empty-prefix "")
  (setq message-indentation-spaces 4)
  (setq message-cite-reply-position 'above)
  #+end_src

  Impress my Japanese colleagues with correct time stamps
  #+begin_src elisp
  (setq message-citation-line-format "On %Y-%m-%d at %R %Z, %f wrote...") ;;TODO Make this cooler
  #+end_src

Use “[[https://en.wikipedia.org/wiki/Date_and_time_notation_in_Japan][Japanese]]” date format in header view:
  #+begin_src elisp
  ;; (setq mu4e-headers-date-format "%Y年/%m月/%d日")
  (setq mu4e-headers-date-format "%Y/%m/%d"
        mu4e-headers-time-format "⧖ %H:%M")

(setq mu4e-headers-fields
      '((:flags . 6)
        (:account-stripe . 2)
        (:from-or-to . 20)
        (:folder . 6)
        (:recipnum . 2)
        (:subject . 80)
        (:human-date . 8))
      mu4e-headers-results-limit 1000
      mu4e-index-cleanup t)

(defvar +mu4e-header--folder-colors nil)
(appendq! mu4e-header-info-custom
          '((:folder .
             (:name "Folder" :shortname "Folder" :help "Lowest level folder" :function
              (lambda (msg)
                (+mu4e-colorize-str
                 (replace-regexp-in-string "\\`.*/" "" (mu4e-message-field msg :maildir))
                 '+mu4e-header--folder-colors))))))

  :config

(map! :localleader
      :map mu4e-compose-mode-map
      :desc "Attach file" "a" 'mml-attach-file
      :desc "Send message" "s" 'message-send-and-exit)
#+end_src

It's also nice to avoid accidentally sending emails with the wrong account. If
we can send from the address in the ~To~ field, let's do that. Opening a prompt
otherwise also seems sensible.

#+begin_src elisp
  ;; SMTP stuff
  (setq send-mail-function #'smtpmail-send-it
        message-send-mail-function 'message-send-mail-with-sendmail
        ;; allow setting account through email header
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-sendmail-f-is-evil t)

  ;; enable format=flowed
  ;; - mu4e sets up visual-line-mode and also fill (M-q) to do the right thing
  ;; - each paragraph is a single long line; at sending, emacs will add the
  ;;   special line continuation characters.
  ;; - also see visual-line-fringe-indicators setting below
  (setq mu4e-compose-format-flowed t)
  ;; because it looks like email clients are basically ignoring format=flowed,
  ;; let's complicate their lives too. send format=flowed with looong lines. :)
  ;; https://www.ietf.org/rfc/rfc2822.txt
  (setq fill-flowed-encode-column 998)

  ;; Composing mail
  (setq mu4e-compose-dont-reply-to-self t))
#+end_src

*** Org Msg

Doom does a fantastic stuff with the defaults with this, so we only make a few
minor tweaks. First, some stylistic things:

#+begin_src emacs-lisp
(setq +org-msg-accent-color "#1a5fb4"
      org-msg-greeting-fmt "\nHi%s,\n\n"
      org-msg-signature "\n\n#+begin_signature\nRegards,\\\\\n@@html:<b>@@Daniel:</b>@@\n#+end_signature")
#+end_src

Now, it would be nice to easily jump to and between the ends of the message
body, so let's make a function for this.

#+begin_src emacs-lisp
(defun +org-msg-goto-body (&optional end)
  "Go to either the beginning or the end of the body.
END can be the symbol top, bottom, or nil to toggle."
  (interactive)
  (let ((initial-pos (point)))
    (org-msg-goto-body)
    (when (or (eq end 'top)
              (and (or (eq initial-pos (point)) ; Already at bottom
                       (<= initial-pos ; Above message body
                           (save-excursion
                             (message-goto-body)
                             (point))))
                   (not (eq end 'bottom))))
      (message-goto-body)
      (search-forward (format org-msg-greeting-fmt
                              (concat " " (org-msg-get-to-name)))))))
#+end_src

We can replace the evil binding of =mu4e-compose-goto-bottom= with this function.

#+begin_src emacs-lisp
(map! :map org-msg-edit-mode-map
      :after org-msg
      :n "G" #'+org-msg-goto-body)
#+end_src

It would also be good to call this when replying to a message. This has to be
implemented as advice as the compose hooks are run before ~mu4e~compose-handler~
moves the point with ~message-goto-<location>~.

#+begin_src emacs-lisp
(defun +org-msg-goto-body-when-replying (compose-type &rest _)
  "Call `+org-msg-goto-body' when the current message is a reply."
  (when (and org-msg-edit-mode (eq compose-type 'reply))
    (+org-msg-goto-body)))

(advice-add 'mu4e~compose-handler :after #'+org-msg-goto-body-when-replying)
#+end_src

***  Bookmarks
Should I have some super-groups (like an all-in-one mailbox?)

#+begin_src elisp
(setq mu4e-bookmarks '((:name "Work Inbox"
                        :query "maildir:/translating/INBOX"
                        :key ?w)
                       (:name "Work Archives"
                        :query "maildir:/translating/Archive"
                        :key ?a)
                       (:name "Personal Unread"
                        :query (concat "maildir:/gmail/INBOX AND flag:unread OR "
                                       "maildir:/personal/INBOX AND flag:unread")
                        :key ?p)
                       (:name "Uni Inbox"
                        :query (concat "maildir:/unsw/INBOX OR "
                                       "maildir:/zmail/INBOX")
                        :key ?i)
                       (:name "Orgmode mailing list new posts" :query "list:emacs-orgmode.gnu.org AND flag:unread" :key ?o)
                       ))
      ;; (make-mu4e-bookmark
      ;;  :name "Personal Archived"
      ;;  :query (concat "maildir:/Gmail/[Gmail].Archive OR "
      ;;                 "maildir:/Fastmail/Archive")
      ;; :key ?a)

(use-package! org-mu4e
  :after mu4e)
#+end_src

Attempting to generate email info from pass file instead of revealing email addresses in my configs on github.

#+begin_src elisp
(use-package! auth-source-pass)
(auth-source-pass-enable)

(after! mu4e
  :config
  (setq mail/personal (auth-source-pass-get "user" "email/personal/hotmail")
        mail/translating (auth-source-pass-get "user" "email/work/translating")
        mail/ad (auth-source-pass-get "user" "email/uni/ad")
        mail/student (auth-source-pass-get "user" "email/uni/student")
        domain/personal (auth-source-pass-get "domain" "email/personal/hotmail")
        domain/translating (auth-source-pass-get "domain" "email/work/translating")
        domain/student (auth-source-pass-get "domain" "email/uni/student")))
#+end_src

I guess I could also split on the domain and return the domain that way:
#+begin_src elisp :tangle no
(car (cdr (s-split "@" mail/personal)))
#+end_src

The meat of the config, this block sets up sending from the given addresses

I'm not sure that the =(symbol-value 'x)= syntax is the best way to go about getting the value for the rx, I'll have to investigate.

#+begin_src elisp
(after! mu4e
  :config

  (setq mu4e-contexts
    (list
      (make-mu4e-context
    :name "UNSW"
    :enter-func (lambda () (mu4e-message "Switch to the uni context"))
    :match-func (lambda (msg)
        (when msg
          (mu4e-message-contact-field-matches msg :to (symbol-value 'mail/student))))
      :vars `((user-mail-address . ,mail/student)
              (mu4e-sent-folder . "/unsw/Sent")
              (mu4e-drafts-folder . "/unsw/Drafts")
              (mu4e-trash-folder . "/unsw/Trash")
              (mu4e-refile-folder . "/unsw/Archive")
              (mu4e-sent-messages-behavior . sent)
              (smtpmail-smtp-user . ,mail/ad)
              (smtpmail-local-domain . ,domain/student)
              (smtpmail-default-smtp-server . "smtp.office365.com")
              (smtpmail-smtp-server . "smtp.office365.com")
              (smtpmail-smtp-service . 587)))
        (make-mu4e-context
      :name "personal"
      :enter-func (lambda () (mu4e-message "Switch to the personal context"))
      :match-func (lambda (msg)
        (when msg
          (mu4e-message-contact-field-matches msg :to (symbol-value 'mail/personal))))
      :vars `((user-mail-address . ,mail/personal)
              (mu4e-sent-folder . "/personal/Sent")
              (mu4e-drafts-folder . "/personal/Drafts")
              (mu4e-trash-folder . "/personal/Trash")
              (mu4e-refile-folder . "/personal/Archive")
              (mu4e-sent-messages-behavior . sent)
              ;; (message-send-mail-function . smtpmail-send-it)
              (smtpmail-stream-type . starttls)
              (smtpmail-smtp-user . ,mail/personal) ;
              (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
              (smtpmail-default-smtp-server . "smtp.office365.com")
              (smtpmail-smtp-server . "smtp.office365.com")
              (smtpmail-smtp-service . 587)))
        (make-mu4e-context
          :name "translating"
          :enter-func (lambda () (mu4e-message "Switch to the translation context"))
          :match-func (lambda (msg)
            (when msg
              (mu4e-message-contact-field-matches msg :to (symbol-value 'mail/translating))))
          :vars `((user-mail-address . ,mail/translating)
                  (mu4e-sent-folder . "/translating/Sent")
                  (mu4e-drafts-folder . "/translating/Drafts")
                  (mu4e-trash-folder . "/translating/Trash")
                  (mu4e-refile-folder . "/translating/Archive")
                  (mu4e-sent-messages-behavior . sent)
                  ;; (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-stream-type . ssl)
                  (smtpmail-smtp-user . ,mail/translating)
                  (smtpmail-local-domain . ,domain/translating)
                  (smtpmail-default-smtp-server . "smtp.mailbox.org")
                  (smtpmail-smtp-server . "smtp.mailbox.org")
                  (smtpmail-smtp-service . 465)))))
  (mu4e t))
#+end_src

** NEXT Set default download locations for mu4e                    :@computer:
:PROPERTIES:
:TRIGGER:  chain-find-next(NEXT,from-current,priority-up,effort-down)
:CREATED:  [2022-02-12 Sat 14:53]
:ID:       ac237473-04e6-447e-ad24-1c9c42892540
:END:

https://www.djcbsoftware.nl/code/mu/mu4e/Attachments.html

** TODO Go over mu4e tips                                          :@computer:
:PROPERTIES:
:CREATED:  [2022-02-12 Sat 14:53]
:ID:       153be129-cee6-4046-9bc9-247501c023fc
:END:

https://www.reddit.com/r/emacs/comments/9ozezm/regale_me_with_your_mu4e_tips_tricks/

** TODO Modify mu4e with extra goodies                             :@computer:
:PROPERTIES:
:CREATED:  [2022-02-12 Sat 14:53]
:ID:       17485cc2-4ef2-4f49-944d-df29dd266224
:END:

https://www.reddit.com/r/emacs/comments/8q84dl/tip_how_to_easily_manage_your_emails_with_mu4e/
http://pragmaticemacs.com/mu4e-tutorials/
https://develop.spacemacs.org/layers/+email/mu4e/README.html

** TODO Get mu4e-conversation working                              :@computer:
:PROPERTIES:
:CREATED:  [2022-02-12 Sat 14:53]
:ID:       0044deff-bedb-48e0-b916-edfdaadec5e9
:END:

https://gitlab.com/ambrevar/mu4e-conversation

** TODO Implement clickable mailto: links for mu4e/firefox         :@computer:
:PROPERTIES:
:CREATED:  [2022-02-12 Sat 14:53]
:ID:       862a87ae-ad3a-4532-a46a-29c932f634b8
:END:

https://groups.google.com/forum/#!topic/mu-discuss/Uce5fTro9gU

We can register Emacs as a potential email client with a desktop file. We could
put an =emacsclient ...= entry in the =Exec= field, but I've found this a bit dodgy.
Instead let's package the =emacslient= behaviour in a little executable
=~/.local/bin/emacsmail=.

#+begin_src shell :tangle ~/.local/bin/emacsmail :shebang "#!/usr/bin/env sh" :mkdirp yes :tangle-mode (identity #o755) :comments no
emacsclient -create-frame --alternate-editor='' --no-wait --eval \
"(progn (x-focus-frame nil) (mu4e-compose-from-mailto \"$1\" t))"
#+end_src

Now we can just call that in a desktop file.

#+begin_src conf :tangle .local/share/applications/emacsmail.desktop :mkdirp yes
[Desktop Entry]
Name=Mu4e
GenericName=Compose a new message with Mu4e in Emacs
Comment=Open mu4e compose window
MimeType=x-scheme-handler/mailto;
Exec=emacsmail %u
Icon=emacs
Type=Application
Terminal=false
Categories=Network;Email;
StartupWMClass=Emacs
#+end_src

To register this, just call
#+begin_src shell :tangle (if (or (not (executable-find "mu")) (string= (shell-command-to-string "xdg-mime query default x-scheme-handler/mailto") "emacsmail.desktop\n")) "no" "setup.sh")
update-desktop-database ~/.local/share/applications
#+end_src

We also want to define ~mu4e-compose-from-mailto~.
#+begin_src emacs-lisp
(defun mu4e-compose-from-mailto (mailto-string &optional quit-frame-after)
  (require 'mu4e)
  (unless mu4e--server-props (mu4e t) (sleep-for 0.1))
  (let* ((mailto (message-parse-mailto-url mailto-string))
         (to (cadr (assoc "to" mailto)))
         (subject (or (cadr (assoc "subject" mailto)) ""))
         (body (cadr (assoc "body" mailto)))
         (headers (-filter (lambda (spec) (not (-contains-p '("to" "subject" "body") (car spec)))) mailto)))
    (when-let ((mu4e-main (get-buffer mu4e-main-buffer-name)))
      (switch-to-buffer mu4e-main))
    (mu4e~compose-mail to subject headers)
    (when body
      (goto-char (point-min))
      (if (eq major-mode 'org-msg-edit-mode)
          (org-msg-goto-body)
        (mu4e-compose-goto-bottom))
      (insert body))
    (goto-char (point-min))
    (cond ((null to) (search-forward "To: "))
          ((string= "" subject) (search-forward "Subject: "))
          (t (if (eq major-mode 'org-msg-edit-mode)
                 (org-msg-goto-body)
               (mu4e-compose-goto-bottom))))
    (font-lock-ensure)
    (when evil-normal-state-minor-mode
      (evil-append 1))
    (when quit-frame-after
      (add-hook 'kill-buffer-hook
                `(lambda ()
                   (when (eq (selected-frame) ,(selected-frame))
                     (delete-frame)))))))
#+end_src

It would also be nice to change the name pre-filled in =From:= when drafting.
#+begin_src emacs-lisp
(defvar mu4e-from-name "Daniel"
  "Name used in \"From:\" template.")
(defadvice! mu4e~draft-from-construct-renamed (orig-fn)
  "Wrap `mu4e~draft-from-construct-renamed' to change the name."
  :around #'mu4e~draft-from-construct
  (let ((user-full-name mu4e-from-name))
    (funcall orig-fn)))
#+end_src

We can also use this a signature,
#+begin_src emacs-lisp
(setq message-signature mu4e-from-name)
#+end_src
* mbsync                                                                :crypt:
:PROPERTIES:
:CREATED:  [2020-07-29 Wed 17:16]
:ID:       3bc99a8f-3e37-45c5-a662-2aaed569e389
:header-args:conf: :tangle ~/.mbsyncrc
:END:

-----BEGIN PGP MESSAGE-----

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
pOTjsyuRxNFVdiTIwHhM5KkobkHlZF1sk5NKC24=
=iG1Z
-----END PGP MESSAGE-----

* msmtp
:PROPERTIES:
:CREATED:  [2023-01-06 Fri 14:48]
:ID:       70bc980b-88fc-4f6e-9837-6cf7e8cb7848
:END:
https://wiki.archlinux.org/title/Msmtp
https://macowners.club/posts/email-emacs-mu4e-macos/

#+begin_src conf :tangle .msmtprc :tangle-mode (identity #o0600)
# Set default values for all following accounts.
defaults
auth           on
tls            on
tls_trust_file /etc/ssl/certs/ca-certificates.crt
logfile        ~/.msmtp.log

# Translation
account        translation
host           smtp.mailbox.org
tls_starttls   off
port           465
from           translation@danielotto.jp
user           translation@danielotto.jp
passwordeval   "pass email/work/translating | head -n1"

# Personal
account        personal
host           smtp.office365.com
port           587
from           dm.otto@hotmail.com
user           dm.otto@hotmail.com
passwordeval   "pass email/personal/hotmail | head -n1"

# # A freemail service
# account        fastmail
# host           smtp.fastmail.com
# port           465
# from           username@fastmail.com
# user           username@fastmail.com
# tls_starttls   off
# password       app-specific-password

# Set a default account
account default : translation
#+end_src
* Installing mu4e on a new machine
:PROPERTIES:
:CREATED:  [2020-08-03 Mon 17:53]
:ID:       7a1a121e-7e31-4890-b753-d77f9b4ddda1
:END:
** Copy over config + maildir
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       8699b9b3-8eb6-4e94-8aea-3fa07e72dbac
:END:
After importing and trusting GPG2 keys, then copy everything over and run
~isync~ to sync folders

#+begin_src shell
  scp corewolf:~/.mbsyncrc ~/
  scp -r corewolf:~/.Maildir ~/
  scp -r corewolf:~/.mbsyncrc ~/
#+end_src
** Rebuild mu
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       56c06253-bce6-48ee-81e0-6a589c60c6da
:END:
mu index --rebuild --maildir=~/.maildir

** Get new app password from hotmail
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       c4b8f685-9f94-415d-8e4b-9fe35a29479e
:END:
1. https://account.microsoft.com/security
2. Select More security options
3. App passwords -> Create new app password
4. Copy to .authinfo.gpg

** Then run mbsync
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       0e0363e7-43e2-4fc3-8fef-d57375d06d0c
:END:

#+begin_src sh
mbsync -Va
#+end_src

** TODO Programmimatically send emails with mu4e
:PROPERTIES:
:CREATED:  [2020-05-28 Thu 10:06]
:ID:       bf470fb3-eeb0-413a-aa56-93cfa68e0981
:END:
:RESOURCES:
- [[https://www.reddit.com/r/emacs/comments/g4svr2/programmatically_send_emails_with_mu4e/][Programmatically send emails with mu4e : emacs]]
:END:
* Dependencies
:PROPERTIES:
:CREATED:  [2021-09-22 Wed 13:19]
:ID:       d0ddff6f-eadc-4dd9-8ed8-b77c8c01d94c
:END:

#+begin_src scheme :tangle ~/.config/guix/manifests/mail.scm

  (specifications->manifest
   '("mu"
     "isync"
     "emacs-mu4e"
     ;; "emacs-org-msg"
     "msmtp"))

#+end_src
