#+BRAIN_CHILDREN: projects/security
#+BRAIN_PARENTS: system
#+TITLE: Desktop Environment
#+auto_tangle: t

This file contains configuration for my overall desktop environment.  My workflow is driven by Emacs but there are still a number of applications, tools, themes, and fonts that I must install to have a complete desktop experience.

* Bash files:
:PROPERTIES:
:CREATED:  [2020-07-28 Tue 11:42]
:ID:       e57cc093-f0b5-4dd1-a8d3-2484024fbc2d
:END:
** Xorg Configuration
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       60633c88-3d54-4d66-b4c6-da9909fa1153
:END:
This may assist with screen tearing on some systems:

/etc/X11/xorg.conf.d/20-intel.conf
#+begin_src shell
  Section "OutputClass"
    Identifier "Intel Graphics"
    MatchDriver "i915"
    Driver "intel"
  EndSection
#+end_src

** .bashrc
:PROPERTIES:
:CREATED:  [2020-07-23 Thu 16:49]
:ID:       1c1c31a1-138e-4dcd-aaa9-b07831ae0902
:header-args:bash: :tangle ~/.bashrc
:END:

I think that I may switch over to zsh before the new install.

#+begin_src bash :exports code
#  _               _
# | |__   __ _ ___| |__  _ __ ___
# | '_ \ / _` / __| '_ \| '__/ __|
# | |_) | (_| \__ \ | | | | | (__
# |_.__/ \__,_|___/_| |_|_|  \___|

stty -ixon # Disable ctrl-s and ctrl-q.
# shopt -s autocd #Allows you to cd into directory merely by typing the directory name.
HISTSIZE= HISTFILESIZE= # Infinite history.

# Setting Bash prompt. Capitalizes username and host if root user (my root user uses this same config file).
if [ "$EUID" -ne 0 ]
	then export PS1="\[$(tput bold)\]\[$(tput setaf 1)\][\[$(tput setaf 3)\]\u\[$(tput setaf 2)\]@\[$(tput setaf 4)\]\h \[$(tput setaf 5)\]\W\[$(tput setaf 1)\]]\[$(tput setaf 7)\]\\$ \[$(tput sgr0)\]"
	else export PS1="\[$(tput bold)\]\[$(tput setaf 1)\][\[$(tput setaf 3)\]ROOT\[$(tput setaf 2)\]@\[$(tput setaf 4)\]$(hostname | awk '{print toupper($0)}') \[$(tput setaf 5)\]\W\[$(tput setaf 1)\]]\[$(tput setaf 7)\]\\$ \[$(tput sgr0)\]"
fi

export PATH=~/.local/bin:$PATH
export PATH=~/.emacs.d/bin:$PATH
# export PATH="~/usr/bin:$PATH"
# export PATH=$HOME/Templates/emacs/src:$PATH
export GPG_TTY=$(tty)

export WINEPREFIX=~/.local/share/wineprefixes/supermemo18
# export WINEPREFIX=~/.msoffice

set -o vi
#+end_src

Here we define some exports for running =Guix= on a foreign distribution (from [[https://guix.gnu.org/blog/2019/running-a-guix-xfce-desktop-on-centos-7/][here]]):
#+begin_src bash :tangle
GUIX_PROFILE="${HOME}/.guix-profile"
[[ -L "${GUIX_PROFILE}" ]] && . "${GUIX_PROFILE}/etc/profile"

export PATH="${HOME}/.config/guix/current/bin:${PATH}"
export INFOPATH="${HOME}/.config/guix/current/share/info:${INFOPATH}"
export MANPATH="${HOME}/.guix-profile/share/man:/usr/share/man"

export XDG_CONFIG_DIRS="${HOME}/.desktop-profile/etc/xdg:${HOME}/.guix-profile/etc/xdg"
export XDG_DATA_DIRS="${HOME}/.desktop-profile/share:${HOME}/.guix-profile/share"
#+end_src

Some aliases for BASH system tasks
#+begin_src bash
# System Maintainence
alias mw="~/.config/mutt/mutt-wizard.sh"
alias muttwizard="~/.config/mutt/mutt-wizard.sh"
alias sdn="sudo shutdown now"
alias psref="gpg-connect-agent RELOADAGENT /bye" # Refresh gpg
alias wt='watch -n1 systemctl --user list-timers'

alias p="sudo pacman"
alias SS="sudo systemctl"
alias v="vim"
# alias emc="emacsclient -c"
alias evpn="expressvpn connect"
alias emc="emacsclient -a '' -c"
alias sv="sudo vim"
alias r="ranger"
alias sr="sudo ranger"
alias ka="killall"
alias g="git"
alias se="cd .emacs.d/ && git pull"
alias trem="transmission-remote"
alias mkd="mkdir -pv"
alias ref="~/.scripts/tools/shortcuts && source ~/.bashrc" # Refresh shortcuts manually and reload bashrc
alias bw="wal -i ~/.config/wall.png" # Rerun pywal
alias pi="bash ~/.larbs/wizard/wizard.sh"
alias vpn="cd ~/Templates/vpngate-with-proxy && sudo ./run tui && cd"
alias fuu="sh ~/.scripts/fuck.sh"
alias deploy="sh ~/.scripts/spacemacs_deploy"
alias bomb="sh ~/.scripts/spacemacs_redeploy"
alias nuke="sh ~/.scripts/nuke_emacs"
alias exwm="sh ~/.scripts/exwm-launcher.sh"
alias exwm1="bash -c 'emacsclient -c; if [ $? != 0 ]; then emacs; fi;'"
alias exwm2="emacsclient -c -a 'emacs'"
alias mntphone="sshfs phone:storage/shared/ ~/Phone/ -o follow_symlinks"

# Adding color
alias ls='ls -hN --color=auto --group-directories-first'
alias grep="grep --color=auto" # Color grep - highlight desired sequence.
alias ccat="highlight --out-format=ansi" # Color cat - print file with syntax highlighting.

# Internet
alias yt="youtube-dl --add-metadata -ic" # Download video link
alias yta="yt -x -f bestaudio/best" # Download only audio
alias YT="youtube-viewer"
alias ethspeed="speedometer -r enp0s25"
alias wifispeed="speedometer -r wlp3s0"
alias starwars="telnet towel.blinkenlights.nl"

# TeX
alias Txa="cp ~/Documents/LaTeX/article.tex"
alias Txs="cp ~/Documents/LaTeX/beamer.tex"
alias Txh="cp ~/Documents/LaTeX/handout.tex"

shdl() { curl -O $(curl -s http://sci-hub.tw/"$@" | grep location.href | grep -o http.*pdf) ;}

#+end_src
Bash completions in =guix=
#+begin_src bash
# Source the Guix shell configuration directories, for vte.sh and bash completions.
GUIX_PROFILES=("${HOME}/.desktop-profile"
               "${HOME}/.guix-profile"
               "${HOME}/.config/guix/current")
for profile in "${GUIX_PROFILES[@]}"; do
    for dir in "${profile}/etc/bash_completion.d" "${profile}/etc/profile.d"; do
        if [[ -d "${dir}" ]]; then
            for f in "${dir}"/*; do
                . $f
            done
        fi
    done
done
#+end_src

#+RESULTS:

*** Lets set .bash_profile while we're at it:
:PROPERTIES:
:CREATED:  [2020-07-28 Tue 11:20]
:ID:       a8712f45-637a-4424-8d6c-051bc7478e72
:header-args:bash: :tangle ~/.bash_profile
:END:
Not entirely sure what this does, some kind of symlinking?

#+begin_src bash
#
# ~/.bash_profile
#
[[ -f ~/.bashrc ]] && . ~/.bashrc
#+end_src

#+RESULTS:

*** vterm functionality
:PROPERTIES:
:CREATED:  [2020-07-26 Sun 15:30]
:ID:       40a26ac3-3d45-45ba-8606-d59d83bd0b23
:END:
https://github.com/akermu/emacs-libvterm#shell-side-configuration
https://justin.abrah.ms/dotfiles/zsh.html

I think this allows directory tracking in vterm

#+begin_src bash
function vterm_printf(){
    if [ -n "$TMUX" ]; then
        # Tell tmux to pass the escape sequences through
        # (Source: http://permalink.gmane.org/gmane.comp.terminal-emulators.tmux.user/1324)
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [ "${TERM%%-*}" = "screen" ]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}
#+end_src

#+RESULTS:

*** Potentially obsolete .bashrc code
:PROPERTIES:
:CREATED:  [2020-07-27 Mon 18:11]
:ID:       abbf2783-381e-4288-958e-fa63b5a0aea6
:header-args:bash: :tangle no
:END:
I'm not sure that I actually need this code now that I use ~with-emacs~:

#+begin_src bash
# for i in emacsclient em emacs vim vi nano; do
# 	  command -v $i >/dev/null 2>&1 && export EDITOR=$i && break
# done
# GIT_EDITOR="$EDITOR"
# VISUAL="$EDITOR"
# [ "$GIT_EDITOR" = em ] && GIT_EDITOR=emc
# [ "$VISUAL" = em ] && VISUAL=emw

# export GIT_EDITOR
# export VISUAL
# export GTK_IM_MODULE=fcitx
# export XMODIFIERS=@im=fcitx
# export QT_IM_MODULE=fcitx

# export GTK_IM_MODULE=uim
# export QT4_IM_MODULE=uim
# export QT_IM_MODULE=uim
# export XMODIFIERS=@im=uim
# export QT4_IM_MODULE=xim
# export QT_IM_MODULE=xim

#+end_src

#+RESULTS:

** .profile
:PROPERTIES:
:CREATED:  [2020-07-26 Sun 15:30]
:ID:       6721076c-af2d-4f47-99e6-898fa3d9fcd0
:header-args:bash: :tangle ~/.profile
:END:

Alot of this config is sourced from Ambrevar's [[https://gitlab.com/ambrevar/dotfiles/-/blob/master/.profile][.profile]]

Setup some exports:

#+begin_src bash
#!/bin/sh
## This file should be automatically sourced by the login manager or Bash if
## .bash_profile does not exist.  If this file is not automatically sourced,
## do it from the shell config to me sure it applies to TTY as well.

# export EDITOR=/usr/bin/nano
export QT_QPA_PLATFORMTHEME="qt5ct"
export QT_AUTO_SCREEN_SCALE_FACTOR=0
export GTK2_RC_FILES="$HOME/.gtkrc-2.0"
#+end_src

#+RESULTS:

Not sure where this is from or if it's strictly needed:

#+begin_src bash
## Mask
## Result for 027 is "rwxr-x---".  022 is the popular default.
##
## As a result applications make the bad assumption # that "others" have access.
## Another drawback of 027 is that is behaves badly with default sudo config: for
## instance "sudo mkdir foo" will effectively create a "foo" folder whose owner
## is root and with permission 027, even if root's umask is 022.  This is
## usually very bad.
## See https://wiki.archlinux.org/index.php/Sudo#Permissive_umask.
##
## It is possible to override sudo's umask by adding the following to the
## sudoers file:
##
## Defaults umask = 0022
## Defaults umask_override
# umask 027
#+end_src

#+RESULTS:

*** TODO Investigate what these path appends do
:PROPERTIES:
:CREATED:  [2020-07-27 Mon 15:33]
:ID:       6c01db13-2f70-4127-bea9-21025c7f487d
:END:

#+begin_src bash
## Preliminary path definitions.  For security reasons (and bad programming
## assumptions) you should always append entries to PATH, not prepend them.
appendpath () {
	[ $# -eq 2 ] && PATHVAR=$2 || PATHVAR=PATH
	[ -d "$1" ] || return
	eval echo \$$PATHVAR | grep -q "\(:\|^\)$1\(:\|$\)" && return
	eval export $PATHVAR="\$$PATHVAR:$1"
}
prependpath () {
	[ $# -eq 2 ] && PATHVAR=$2 || PATHVAR=PATH
	[ -d "$1" ] || return
	eval echo \$$PATHVAR | grep -q "\(:\|^\)$1\(:\|$\)" && return
	eval export $PATHVAR="$1:\$$PATHVAR"
}

# ## Last PATH entries.
# appendpath "${HOME}/.local/bin"
# command -v pacman >/dev/null 2>&1 && appendpath "${HOME}/.local/bin/pacman"

## mcron: needs to be run after PATH is fully set or else local programs could
## be missing.
# if command -v mcron >/dev/null 2>&1; then
# 	# TODO: Only start if not already started?
# 	# pkill mcron
# 	mcron &
# fi
#+end_src

#+RESULTS:

*** TODO Do I need to set SSH to use gpg-agent?
:PROPERTIES:
:CREATED:  [2020-07-27 Mon 15:35]
:ID:       bfa0d185-8469-4281-85b8-79046058af19
:END:

#+begin_src bash
## SSH-Agent
## Set SSH to use gpg-agent
# unset SSH_AGENT_PID
# if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
#   export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
# fi
# Set GPG TTY
# export GPG_TTY=$(tty)
# Refresh gpg-agent tty in case user switches into an X session
# gpg-connect-agent updatestartuptty /bye >/dev/null

#+end_src

#+RESULTS:

*** Setup emacs for editing:
:PROPERTIES:
:CREATED:  [2020-07-27 Mon 15:44]
:ID:       65dd5726-af3b-455b-b695-53904c05add8
:END:

#+begin_src bash
## Default text editor
## 'em' is a custom wrapper for emacsclient. See '.bin/em'.
## VISUAL is given priority by some programs like Mutt. This way we can separate
## editors that wait from those that don't.
for i in emacsclient em emacs vim vi nano; do
	command -v $i >/dev/null 2>&1 && export EDITOR=$i && break
done
GIT_EDITOR="$EDITOR"
VISUAL="$EDITOR"
[ "$GIT_EDITOR" = em ] && GIT_EDITOR=emc
[ "$VISUAL" = em ] && VISUAL=emw
export GIT_EDITOR
export VISUAL
#+end_src

#+RESULTS:

*** This looks like it creates a log file for startup errors:
:PROPERTIES:
:CREATED:  [2020-07-27 Mon 15:36]
:ID:       ba6ea64f-c63b-4a49-ac61-8b34b502f508
:END:

#+begin_src bash
## Linux specific
if [ "$(uname -o)" = "GNU/Linux" ] ; then
	## Startup error log.
	## dmesg
	log_dmesg="$(dmesg | grep -i error)"
	[ -n "$log_dmesg" ] && echo "$log_dmesg" > "$HOME/errors-dmesg.log" || rm "$HOME/errors-dmesg.log" 2>/dev/null
	## systemd
	if command -v systemctl >/dev/null 2>&1; then
		count="$(systemctl show | awk -F= '$1=="NFailedUnits" {print $2; exit}')"
		if [ $count -ne 0 ]; then
			systemctl -l --failed > "$HOME/errors-systemd.log"
		else
			rm -f "$HOME/errors-systemd.log"
		fi
	fi

#+end_src

#+RESULTS:

*** Some misc .profile changes that I may not need:
:PROPERTIES:
:CREATED:  [2020-07-27 Mon 15:34]
:ID:       8bf0c36d-f20e-419f-8dbc-8d6cd337fa60
:END:

#+begin_src bash
## Remove less history.
# LESSHISTFILE='-'

## Manpage.
# export MANPAGER="less -s"
# export MANWIDTH=80

## Time display (with ls command for example).  GNU 'ls' only.
export TIME_STYLE=+"|%Y-%m-%d %H:%M:%S|"
#+end_src

#+RESULTS:

*** TODO Investigate WINE overides
:PROPERTIES:
:CREATED:  [2020-07-27 Mon 15:39]
:ID:       f90118c3-e1a3-4a9f-a1ce-fe6c155a71c6
:header-args:bash: :tangle no
:END:
I should investigate these WINE overrides, are they messing with SM?
Perhaps I could quarantine different overrides into differing GUIX profiles/environments

#+begin_src bash
## Wine DLL overrides.
## Remove the annoying messages for Mono and Gecko.
export WINEDLLOVERRIDES="mscoree,mshtml="
## Do not create desktop links or start menu entries.
export WINEDLLOVERRIDES="$WINEDLLOVERRIDES;winemenubuilder.exe=d"

## Pacman asp root.
if command -v asp >/dev/null 2>&1; then
	export ASPROOT="$HOME/.cache/asp"
fi
#+end_src

*** TODO I think this is ambrevar's GUIX conf - check out later.
:PROPERTIES:
:CREATED:  [2021-08-13 Fri 22:24]
:ID:       e69b4244-96c5-4eff-ad31-a6c0c6dcf79d
:END:
#+begin_src bash
## Guix
## WARNING: GUIX_PACKAGE_PATH is deprecated in favor of channels.
# if command -v guix >/dev/null 2>&1; then
# 	export GUIX_PACKAGE_PATH="$HOME/.guix-packages"
# fi


## $HOME software install
## See http://nullprogram.com/blog/2017/06/19/.
## The variables should not contain paths to non-existing folders as it may
## break compilers.
# prependpath "$HOME/.local/include" C_INCLUDE_PATH
# prependpath "$HOME/.local/include" CPLUS_INCLUDE_PATH
# prependpath "$HOME/.local/lib" LIBRARY_PATH
# prependpath "$HOME/.local/lib/pkgconfig" PKG_CONFIG_PATH
# prependpath "$HOME/.local/share/info" INFOPATH
# prependpath "$HOME/.local/share/man" MANPATH
## If you install a library in your home directory that is also installed on the
## system, and then run a system program, it may be linked against your library
## rather than the library installed on the system as was originally
## intended. This could have detrimental effects.
# export LD_LIBRARY_PATH=$HOME/.local/lib

## Hook. Should be sourced last
# [ -f ~/.profile_hook ] && . ~/.profile_hook
## Hook example
#
# export CPPFLAGS=-I$HOME/local/usr/include
# export LDFLAGS=-L$HOME/local/usr/lib
#
# appendpath "$HOME/local/usr/lib/python2.7/dist-packages/" PYTHONPATH
# export LUA_CPATH="$HOME/local/usr/lib/lib?.so;$(lua -e "print(package.cpath)")"
#
# umask 077

## End: Source .bashrc. The rc file should guard against non-interactive shells.
[ "$(ps -o comm= $$)" != bash ] && return
[ -f ~/.bashrc ] && . ~/.bashrc

[ -z "$DISPLAY" ] && [ "$(tty)" = '/dev/tty1' ] && exec xinit -- vt01

#+end_src
** .xinitrc
:PROPERTIES:
:CREATED:  [2020-07-28 Tue 11:26]
:ID:       a8723306-a080-45d3-a566-b66e0c33b3f2
:header-args:bash: :tangle ~/.xinitrc
:END:
#+begin_src bash
#!/bin/bash
#
# ~/.xinitrc
#
# Executed by startx (run your window manager from here)

userresources=$HOME/.Xresources
# xrdb -I$HOME ~/.Xresources
usermodmap=$HOME/.Xmodmap
sysresources=/etc/X11/xinit/.Xresources
sysmodmap=/etc/X11/xinit/.Xmodmap

[ -f /etc/xprofile ] && . /etc/xprofile
[ -f ~/.xprofile ] && . ~/.xprofile
[[ -f ~/.Xdefaults ]] && xrdb -merge ~/.Xdefaults

# for uim Japanese input
# export GTK_IM_MODULE='uim'
# export QT_IM_MODULE='uim'
# uim-xim &
# export XMODIFIERS='@im=uim'

# SESSION=${1:-xfce}

# exec emacsclient -a "" -c

## OR
# sh -c "emacsclient -a '' -c"

#+end_src

*** Some extraneous code I can probably delete
:PROPERTIES:
:CREATED:  [2020-07-28 Tue 11:32]
:ID:       85a91983-4bf1-49cb-a5d2-d7083be7d3ac
:header-args:bash: :tangle no
:END:
#+begin_src bash
# merge in defaults and keymaps

# if [ -f $sysresources ]; then
#     xrdb -merge $sysresources
# fi

# if [ -f $sysmodmap ]; then
#     xmodmap $sysmodmap
# fi

# if [ -f "$userresources" ]; then
#     xrdb -merge "$userresources"
# fi

# if [ -f "$usermodmap" ]; then
#     xmodmap "$usermodmap"
# fi

# start some nice programs

# if [ -d /etc/X11/xinit/xinitrc.d ] ; then
#     for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do
#         [ -x "$f" ] && . "$f"
#     done
#     unset f
# fi

# get_session(){
# 	local dbus_args=(--sh-syntax --exit-with-session)
# 	case "$SESSION" in
# 		awesome) dbus_args+=(awesome) ;;
# 		bspwm) dbus_args+=(bspwm-session) ;;
# 		budgie) dbus_args+=(budgie-desktop) ;;
# 		cinnamon) dbus_args+=(cinnamon-session) ;;
# 		deepin) dbus_args+=(startdde) ;;
# 		enlightenment) dbus_args+=(enlightenment_start) ;;
# 		fluxbox) dbus_args+=(startfluxbox) ;;
# 		gnome) dbus_args+=(gnome-session) ;;
# 		i3|i3wm) dbus_args+=(i3 --shmlog-size 0) ;;
# 		jwm) dbus_args+=(jwm) ;;
# 		kde) dbus_args+=(startkde) ;;
# 		lxde) dbus_args+=(startlxde) ;;
# 		lxqt) dbus_args+=(lxqt-session) ;;
# 		mate) dbus_args+=(mate-session) ;;
# 		xfce) dbus_args+=(xfce4-session) ;;
# 		openbox) dbus_args+=(openbox-session) ;;
# 		*) dbus_args+=("$SESSION") ;;
# 	esac

# 	echo "dbus-launch ${dbus_args[*]}"
# }

# exec $(get_session)


#+end_src
** .vimrc
:PROPERTIES:
:CREATED:  [2020-07-29 Wed 17:00]
:ID:       2689697c-3e12-48f3-ae2d-ebb78752e1e1
:header-args:bash: :tangle ~/.vimrc
:END:

Ugh, Vim.
I should probably put vim into its own section and then load config directories etc.

#+begin_src conf
"        _
" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|

let mapleader =" "

call plug#begin('~/.vim/plugged')
Plug 'junegunn/goyo.vim'
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'jreybert/vimagit'
Plug 'vimwiki/vimwiki'
Plug 'dylanaraps/wal.vim'
call plug#end()

" Some basics:
	set nocompatible
	filetype plugin on
	syntax on
	set encoding=utf-8
	set number
	set relativenumber

" Splits open at the bottom and right, which is non-retarded, unlike vim defaults.
	set splitbelow
	set splitright

" Shortcutting split navigation, saving a keypress:
	map <C-h> <C-w>h
	map <C-j> <C-w>j
	map <C-k> <C-w>k
	map <C-l> <C-w>l

" Check file in shellcheck:
	map <leader>s :!clear && shellcheck %<CR>

" View an image for a suckless sent presentation:
	map <leader>v $F@ly$:!feh --scale-down --auto-zoom --image-bg black <c-r>" &<CR><CR>

" Open my bibliography file in split
	map <F9> :vsp<space>~/Documents/LaTeX/uni.bib<CR>
	map <leader>b :vsp<space>~/Documents/LaTeX/uni.bib<CR>

" Open the selected text in a split (i.e. should be a file).
	map <leader>o "oyaW:sp <C-R>o<CR>
	xnoremap <leader>o "oy<esc>:sp <C-R>o<CR>
	vnoremap <leader>o "oy<esc>:sp <C-R>o<CR>

" Replace all is aliased to S.
	nnoremap S :%s//g<Left><Left>

" Open corresponding .pdf
	map <leader>p :!opout <c-r>%<CR><CR>

" Compile document
	map <leader>c :!compiler <c-r>%<CR>

"For saving view folds:
	"au BufWinLeave * mkview
	"au BufWinEnter * silent loadview

" Interpret .md files, etc. as .markdown
	let g:vimwiki_ext2syntax = {'.Rmd': 'markdown', '.rmd': 'markdown','.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}

" Make calcurse notes markdown compatible:
	autocmd BufRead,BufNewFile /tmp/calcurse*,~/.calcurse/notes/* set filetype=markdown

" groff files automatically detected
	autocmd BufRead,BufNewFile *.ms,*.me,*.mom set filetype=groff

" .tex files automatically detected
	autocmd BufRead,BufNewFile *.tex set filetype=tex

" Readmes autowrap text:
	autocmd BufRead,BufNewFile *.md set tw=79

" Get line, word and character counts with F3:
	map <F3> :!wc %<CR>

" Spell-check set to F6:
	map <F6> :setlocal spell! spelllang=en_us<CR>

" Use urlview to choose and open a url:
	:noremap <leader>u :w<Home>silent <End> !urlscan<CR>
	:noremap ,, :w<Home>silent <End> !urlscan<CR>

" Copy selected text to system clipboard (requires gvim installed):
	vnoremap <C-c> "*Y :let @+=@*<CR>
	map <C-p> "+P

" Goyo plugin makes text more readable when writing prose:
	map <F10> :Goyo<CR>
	map <leader>f :Goyo \| set linebreak<CR>
	inoremap <F10> <esc>:Goyo<CR>a

" Enable Goyo by default for mutt writting
	" Goyo's width will be the line limit in mutt.
	autocmd BufRead,BufNewFile /tmp/neomutt* let g:goyo_width=80
	autocmd BufRead,BufNewFile /tmp/neomutt* :Goyo

" Enable autocompletion:
	set wildmode=longest,list,full
	set wildmenu

" Automatically deletes all tralling whitespace on save.
	autocmd BufWritePre * %s/\s\+$//e

" When shortcut files are updated, renew bash and ranger configs with new material:
	autocmd BufWritePost ~/.key_directories,~/.key_files !bash ~/.scripts/tools/shortcuts

" Runs a script that cleans out tex build files whenever I close out of a .tex file.
	autocmd VimLeave *.tex !texclear %

" Disables automatic commenting on newline:
	autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Navigating with guides
	inoremap <Space><Tab> <Esc>/<++><Enter>"_c4l
	vnoremap <Space><Tab> <Esc>/<++><Enter>"_c4l
	map <Space><Tab> <Esc>/<++><Enter>"_c4l

 "____        _                  _
"/ ___| _ __ (_)_ __  _ __   ___| |_ ___
"\___ \| '_ \| | '_ \| '_ \ / _ \ __/ __|
 "___) | | | | | |_) | |_) |  __/ |_\__ \
"|____/|_| |_|_| .__/| .__/ \___|\__|___/
              "|_|   |_|

"""LATEX
	" Word count:
	autocmd FileType tex map <F3> :w !detex \| wc -w<CR>
	autocmd FileType tex inoremap <F3> <Esc>:w !detex \| wc -w<CR>
	" Compile document using xelatex:
	autocmd FileType tex inoremap <F5> <Esc>:!xelatex<space><c-r>%<Enter>a
	autocmd FileType tex nnoremap <F5> :!xelatex<space><c-r>%<Enter>
	" Code snippets
	autocmd FileType tex inoremap ,fr \begin{frame}<Enter>\frametitle{}<Enter><Enter><++><Enter><Enter>\end{frame}<Enter><Enter><++><Esc>6kf}i
	autocmd FileType tex inoremap ,fi \begin{fitch}<Enter><Enter>\end{fitch}<Enter><Enter><++><Esc>3kA
	autocmd FileType tex inoremap ,exe \begin{exe}<Enter>\ex<Space><Enter>\end{exe}<Enter><Enter><++><Esc>3kA
	autocmd FileType tex inoremap ,em \emph{}<++><Esc>T{i
	autocmd FileType tex inoremap ,bf \textbf{}<++><Esc>T{i
	autocmd FileType tex vnoremap , <ESC>`<i\{<ESC>`>2la}<ESC>?\\{<Enter>a
	autocmd FileType tex inoremap ,it \textit{}<++><Esc>T{i
	autocmd FileType tex inoremap ,ct \textcite{}<++><Esc>T{i
	autocmd FileType tex inoremap ,cp \parencite{}<++><Esc>T{i
	autocmd FileType tex inoremap ,glos {\gll<Space><++><Space>\\<Enter><++><Space>\\<Enter>\trans{``<++>''}}<Esc>2k2bcw
	autocmd FileType tex inoremap ,x \begin{xlist}<Enter>\ex<Space><Enter>\end{xlist}<Esc>kA<Space>
	autocmd FileType tex inoremap ,ol \begin{enumerate}<Enter><Enter>\end{enumerate}<Enter><Enter><++><Esc>3kA\item<Space>
	autocmd FileType tex inoremap ,ul \begin{itemize}<Enter><Enter>\end{itemize}<Enter><Enter><++><Esc>3kA\item<Space>
	autocmd FileType tex inoremap ,li <Enter>\item<Space>
	autocmd FileType tex inoremap ,ref \ref{}<Space><++><Esc>T{i
	autocmd FileType tex inoremap ,tab \begin{tabular}<Enter><++><Enter>\end{tabular}<Enter><Enter><++><Esc>4kA{}<Esc>i
	autocmd FileType tex inoremap ,ot \begin{tableau}<Enter>\inp{<++>}<Tab>\const{<++>}<Tab><++><Enter><++><Enter>\end{tableau}<Enter><Enter><++><Esc>5kA{}<Esc>i
	autocmd FileType tex inoremap ,can \cand{}<Tab><++><Esc>T{i
	autocmd FileType tex inoremap ,con \const{}<Tab><++><Esc>T{i
	autocmd FileType tex inoremap ,v \vio{}<Tab><++><Esc>T{i
	autocmd FileType tex inoremap ,a \href{}{<++>}<Space><++><Esc>2T{i
	autocmd FileType tex inoremap ,sc \textsc{}<Space><++><Esc>T{i
	autocmd FileType tex inoremap ,chap \chapter{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,sec \section{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,ssec \subsection{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,sssec \subsubsection{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,st <Esc>F{i*<Esc>f}i
	autocmd FileType tex inoremap ,beg \begin{DELRN}<Enter><++><Enter>\end{DELRN}<Enter><Enter><++><Esc>4k0fR:MultipleCursorsFind<Space>DELRN<Enter>c
	autocmd FileType tex inoremap ,up <Esc>/usepackage<Enter>o\usepackage{}<Esc>i
	autocmd FileType tex nnoremap ,up /usepackage<Enter>o\usepackage{}<Esc>i
	autocmd FileType tex inoremap ,tt \texttt{}<Space><++><Esc>T{i
	autocmd FileType tex inoremap ,bt {\blindtext}
	autocmd FileType tex inoremap ,nu $\varnothing$
	autocmd FileType tex inoremap ,col \begin{columns}[T]<Enter>\begin{column}{.5\textwidth}<Enter><Enter>\end{column}<Enter>\begin{column}{.5\textwidth}<Enter><++><Enter>\end{column}<Enter>\end{columns}<Esc>5kA
	autocmd FileType tex inoremap ,rn (\ref{})<++><Esc>F}i

"""HTML
	autocmd FileType html inoremap ,b <b></b><Space><++><Esc>FbT>i
	autocmd FileType html inoremap ,it <em></em><Space><++><Esc>FeT>i
	autocmd FileType html inoremap ,1 <h1></h1><Enter><Enter><++><Esc>2kf<i
	autocmd FileType html inoremap ,2 <h2></h2><Enter><Enter><++><Esc>2kf<i
	autocmd FileType html inoremap ,3 <h3></h3><Enter><Enter><++><Esc>2kf<i
	autocmd FileType html inoremap ,p <p></p><Enter><Enter><++><Esc>02kf>a
	autocmd FileType html inoremap ,a <a<Space>href=""><++></a><Space><++><Esc>14hi
	autocmd FileType html inoremap ,e <a<Space>target="_blank"<Space>href=""><++></a><Space><++><Esc>14hi
	autocmd FileType html inoremap ,ul <ul><Enter><li></li><Enter></ul><Enter><Enter><++><Esc>03kf<i
	autocmd FileType html inoremap ,li <Esc>o<li></li><Esc>F>a
	autocmd FileType html inoremap ,ol <ol><Enter><li></li><Enter></ol><Enter><Enter><++><Esc>03kf<i
	autocmd FileType html inoremap ,im <img src="" alt="<++>"><++><esc>Fcf"a
	autocmd FileType html inoremap ,td <td></td><++><Esc>Fdcit
	autocmd FileType html inoremap ,tr <tr></tr><Enter><++><Esc>kf<i
	autocmd FileType html inoremap ,th <th></th><++><Esc>Fhcit
	autocmd FileType html inoremap ,tab <table><Enter></table><Esc>O
	autocmd FileType html inoremap ,gr <font color="green"></font><Esc>F>a
	autocmd FileType html inoremap ,rd <font color="red"></font><Esc>F>a
	autocmd FileType html inoremap ,yl <font color="yellow"></font><Esc>F>a
	autocmd FileType html inoremap ,dt <dt></dt><Enter><dd><++></dd><Enter><++><esc>2kcit
	autocmd FileType html inoremap ,dl <dl><Enter><Enter></dl><enter><enter><++><esc>3kcc
	autocmd FileType html inoremap &<space> &amp;<space>
	autocmd FileType html inoremap á &aacute;
	autocmd FileType html inoremap é &eacute;
	autocmd FileType html inoremap í &iacute;
	autocmd FileType html inoremap ó &oacute;
	autocmd FileType html inoremap ú &uacute;
	autocmd FileType html inoremap ä &auml;
	autocmd FileType html inoremap ë &euml;
	autocmd FileType html inoremap ï &iuml;
	autocmd FileType html inoremap ö &ouml;
	autocmd FileType html inoremap ü &uuml;
	autocmd FileType html inoremap ã &atilde;
	autocmd FileType html inoremap ẽ &etilde;
	autocmd FileType html inoremap ĩ &itilde;
	autocmd FileType html inoremap õ &otilde;
	autocmd FileType html inoremap ũ &utilde;
	autocmd FileType html inoremap ñ &ntilde;
	autocmd FileType html inoremap à &agrave;
	autocmd FileType html inoremap è &egrave;
	autocmd FileType html inoremap ì &igrave;
	autocmd FileType html inoremap ò &ograve;
	autocmd FileType html inoremap ù &ugrave;


""".bib
	autocmd FileType bib inoremap ,a @article{<Enter><tab>author<Space>=<Space>"<++>",<Enter><tab>year<Space>=<Space>"<++>",<Enter><tab>title<Space>=<Space>"<++>",<Enter><tab>journal<Space>=<Space>"<++>",<Enter><tab>volume<Space>=<Space>"<++>",<Enter><tab>pages<Space>=<Space>"<++>",<Enter><tab>}<Enter><++><Esc>8kA,<Esc>i
	autocmd FileType bib inoremap ,b @book{<Enter><tab>author<Space>=<Space>"<++>",<Enter><tab>year<Space>=<Space>"<++>",<Enter><tab>title<Space>=<Space>"<++>",<Enter><tab>publisher<Space>=<Space>"<++>",<Enter><tab>}<Enter><++><Esc>6kA,<Esc>i
	autocmd FileType bib inoremap ,c @incollection{<Enter><tab>author<Space>=<Space>"<++>",<Enter><tab>title<Space>=<Space>"<++>",<Enter><tab>booktitle<Space>=<Space>"<++>",<Enter><tab>editor<Space>=<Space>"<++>",<Enter><tab>year<Space>=<Space>"<++>",<Enter><tab>publisher<Space>=<Space>"<++>",<Enter><tab>}<Enter><++><Esc>8kA,<Esc>i

"MARKDOWN
	autocmd Filetype markdown,rmd map <leader>w yiWi[<esc>Ea](<esc>pa)
	autocmd Filetype markdown,rmd inoremap ,n ---<Enter><Enter>
	autocmd Filetype markdown,rmd inoremap ,b ****<++><Esc>F*hi
	autocmd Filetype markdown,rmd inoremap ,s ~~~~<++><Esc>F~hi
	autocmd Filetype markdown,rmd inoremap ,e **<++><Esc>F*i
	autocmd Filetype markdown,rmd inoremap ,h ====<Space><++><Esc>F=hi
	autocmd Filetype markdown,rmd inoremap ,i ![](<++>)<++><Esc>F[a
	autocmd Filetype markdown,rmd inoremap ,a [](<++>)<++><Esc>F[a
	autocmd Filetype markdown,rmd inoremap ,1 #<Space><Enter><++><Esc>kA
	autocmd Filetype markdown,rmd inoremap ,2 ##<Space><Enter><++><Esc>kA
	autocmd Filetype markdown,rmd inoremap ,3 ###<Space><Enter><++><Esc>kA
	autocmd Filetype markdown,rmd inoremap ,l --------<Enter>
	autocmd Filetype rmd inoremap ,r ```{r}<CR>```<CR><CR><esc>2kO
	autocmd Filetype rmd inoremap ,p ```{python}<CR>```<CR><CR><esc>2kO
	autocmd Filetype rmd inoremap ,c ```<cr>```<cr><cr><esc>2kO

""".xml
	autocmd FileType xml inoremap ,e <item><Enter><title><++></title><Enter><guid<space>isPermaLink="false"><++></guid><Enter><pubDate><Esc>:put<Space>=strftime('%a, %d %b %Y %H:%M:%S %z')<Enter>kJA</pubDate><Enter><link><++></link><Enter><description><![CDATA[<++>]]></description><Enter></item><Esc>?<title><enter>cit
	autocmd FileType xml inoremap ,a <a href="<++>"><++></a><++><Esc>F"ci"

vmap <expr> ++ VMATH_YankAndAnalyse()
nmap ++ vip++

vnoremap K xkP`[V`]
vnoremap J xp`[V`]
vnoremap L >gv
vnoremap H <gv

map <enter><enter> yi[:e <c-r>"<cr>

#+end_src

** xsessions
:PROPERTIES:
:CREATED:  [2020-12-09 Wed 13:27]
:ID:       d88b7869-ef26-4a62-899c-95f16659f10f
:header-args: :mkdirp yes
:END:

This ensures we have an EXWM entry at login
#+begin_src sh :tangle ~/.doom.d/exwm.desktop
[Desktop Entry]
Name=EXWM
Comment=Emacs Window Manager
Exec=sh ~/.scripts/exwm-launcher.sh
TryExec=sh
Type=Application
X-LightDM-DesktopName=exwm
DesktopNames=exwm
#+end_src

It needs to be symlinked to the ~/usr/share/xsessions~ folder:
#+begin_src sh :noweb-ref add exwm.desktop :dir /sudo::
sudo ln -f ~/.doom.d/exwm.desktop /usr/share/xsessions/exwm.desktop
#+end_src

* Mail
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       5ad74110-2721-44dd-ae60-224f752f80e9
:END:
Lets setup mbsync first and then move on to the mu4e configuration

** Email addresses:                                                    :crypt:
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       c70d40b6-d368-46d6-8fda-a8d8f96db28f
:END:

-----BEGIN PGP MESSAGE-----

jA0EBwMCLZFcahuH1sD/0sDjAWz4bJWzgsCjxBBtqRRIZqtrh/Vr5df8JMO5fOUV
vWbwcEun0vfDwxv7SAHL/gQADc8iHFYujK2Dq6AAuCCd7vjQjBzukaBAI7nrH409
NRIJANpzs/0Me2bSmuv7oo5OYW2TpUQKQ5wQNaUTQ74MtBCK7JKdSvx4g6PDx1IW
lLfuQSv0A8aNDIDDGFT8xczOt8uvvWlSG/qGVFFCvQMbXOcwLShY4pBA09AJSGrA
x466xNn/J7XdeUXzpbtbWsSVWBw9IzTRaDgwB4PqaWoKtmILaYAF/0Obf/RFigot
6YBGs+OSNGcF1vC3mvqfEOAvm3GAKbsvSew6XRVmgTVmmhhHmVJxDYIeaYsEqFf2
SVV1ETJZwT0Zb01q/6ki+sfc4LwA/k1tlmMlO93nERXGxcdIzKr2+gSrs5q/+Mc6
59rkAwkcrb64EXeUnIuxE9yuMa/+VxMa+IZta7ZjopLwiCsfNqg8tHSjjdYfg34X
5H3PFF5PqV2bgQdyRqReQScdfIHPxoNTIC2ZbbEhccS+PWVb8RDK0UDZSDS9q3Lr
HQIzdd0=
=xbZH
-----END PGP MESSAGE-----

** mbsync                                                              :crypt:
:PROPERTIES:
:CREATED:  [2020-07-29 Wed 17:16]
:ID:       3bc99a8f-3e37-45c5-a662-2aaed569e389
:header-args:conf: :tangle ~/.mbsyncrc
:END:

-----BEGIN PGP MESSAGE-----

jA0EBwMCGKZ+jtPoQj3/0uoBdMkhpHLceV6ul08uJHWIl5BJtAW6ru664vhbVAi/
pLILI0bLkIxqI+f6HwsRdo5ivnLBo6vxiagCacYsGYzgOUzh1aXEprMQP65tYSIX
40D5NuuaLtK41BVsad9eS6l46ZCxdzk2D1wIh7bnsvdpitwX7npg+T1s/RjTFJXV
hra+GJ6z/evnvC5tT30xNa64w74pmtsJKFI+Npc2Hxc/0gLz/wns3q2ZteKGtDq+
mBy4fHOvbEWIMx7W9gdk6MsKCospfEZrWYM6xom+RXG27WPk7dLGtdhNh/FtJ7cr
1o5WlEcZZpzOGVhFH4bwMUInK+AoQCln2AXp85ikSuixExCNsNrOGoukz1oGhNPr
30unnyOQNd90QFJ/Bl53oKn3t85oC4SBiRr4HFkXYIe5lcrDELnYDd+priLbQX+e
r2E1rErwQ1sagHlgAKQLTVy/slARAMNjdGdXhzF3NVK7aD4qZN1ECRR0QtU8wcDc
M4sW0nnrpF+MnWRied0h7q63tZwxhJzxlXiM/G3o1iZpzIJrBrdjHXaxMIwDl6fz
+cJPsaXac8D/mLWXICqUhu5h6KXw8lHy2+rI1udKkQ4ApBL8PLLAqYB+vdHSs9Je
I3AA/FSzMpg98bJCQHou5kbR/tb/zx7aYFJHYDldAHrFAtIOKBOZoZR6fj9Keo1p
h7anLJnpYQ9Jmlni5IBpD1QiOREb8DTAXVkQbE8DEmfHHSQ141E+WAe4pBctCueh
hS6VywBXYpGiQfygpazo1Y4K7D4fnEz5tp4YJZhrU4/aWMI8CSVgKV/wp0nc+zqO
mtBgZEThMKMHbkcX5X78V2Wxf+vUrx4dWFw7fhHJFb8jIipGgzzgaX50bWSSQwNj
PO1MUj9qu+9ujjEDmk5lfJShE0PsffRGFl2HBJg/aRgrGYMpZ2fDTwBeNld6x4pz
ZPhlhIMUdKOT7P1U+znQNku+F6PkKfAzM/Nshr48naLVjAQGlBshHv38pf5GYbth
K0S9sspb3KqVjJqSsMvpfW5IxyeK1jUy7lJxIJ3MQPqEvW83XZGd7/6s9pE1a3Bz
gEiBoqFP0F9DMcpo38yQyw3RFdHW5PYNki+vluD1py73YCTUOMxdVqwT+891kAp+
O3PLWgRWfe0s/JXGBtV2ccfZ/JL//bht3XRs5xNntgpJO8lBe3PUVkFbpXrnrM5y
3j1vJRWvWy8f1B6skF/1aB4VI3JMRxpbv5tqRiyPNPGMGI+e1256PZdp1Re+4IJe
05uStuh7yiy/nrphrmBYFK9O7KibNJQi7HLpw8MYOAmxbSdSJ1McTBzwCXhWPiuF
FKqxfWBZSfvHJif46sktQVGoxpnGVkiCLAmoPSJHwLCcwPMTzBdSEDtUlFxrjhxY
GDx3isltoBkK5R/Bk+g+ogHtxg/bKb4qTIPHDuq8jMh3AVc4UU5DWz7H9ni58ug7
+NqZbjdQVt0+6ycK0aHWg8YcX6yHTfZFbg0DTFUlAs2KNg0m/H30UUvn9VT5FHc9
ASgq78g1qQkNryV/1hbyr1/ZOlG1vhIlO9duLhrjITVJoICBQjzQ7/X1DW+kSDbV
tklyTH4Kj3CrpGkeIX26yAJ09rbU8vwUiOQPdIrPH+mfYdhiICH+O1rbfn9XTJ+Y
I+aLrbOQISChgFnnEcMhjTm/r/fctk3kmGccQKrLYZQ2bqbAbJ2lp5AwXE85Its4
HqfGRwimg/iKd+XI2H2tndbIAvxJDEuAa7ntpa5UaoF53+YjsED3fjdzRwf1JZDv
7ie7ROZ2JUT8tfWZkbd42xtI+PC1rS1LI4v7JLKLB2A+NjqeKaEX6nNqH85yQVyo
JDD8FpUCc9mCpG3l9hoOCZa/IPvh/3uN/RYh8cd2TiCOAC+Z0K3dp3pAaAtWJtQh
zhfvC1UlPI/oyq8vVpCswJC46i3JIeFTIvXgtYTnPyEuW5aTAPQ=
=ig7U
-----END PGP MESSAGE-----

** Variables
:PROPERTIES:
:CREATED:  [2020-08-15 Sat 12:52]
:ID:       9fb7cbb8-73e4-4cac-a829-eb5bc9027798
:END:

#+begin_src emacs-lisp :results silent
;; (auth-source-pass-entries)
(setq mail/personal (auth-source-pass-get "user" "email/personal/hotmail"))
#+end_src


** mu4e
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       d8343324-2695-42e4-882d-2d147e7627b5
:header-args:elisp: :tangle ~/.doom.d/+mail.el
:END:
https://github.com/seanfarley/mu4e-patch/blob/master/README.org
https://github.com/org-mime/org-mime

A large portion of my mu4e config is taken from [[https://github.com/lepisma/rogue/tree/master/local/r-mu4e][lepisma's r-mu4e]] and Ambrevar's [[https://gitlab.com/ambrevar/dotfiles/-/blob/master/.emacs.d/lisp/init-mu4e.el][config]].

#+begin_src elisp
;;; $DOOMDIR/+mail.el -*- lexical-binding: t; -*-

;; (org-link-set-parameters "mu4e" :follow #'org-mu4e-open :store
;; #'org-mu4e-store-link)

(use-package! org-mu4e
  :after mu4e)
;; configure email


;; (map! :localleader
;;       :map mu4e-compose-mode-map
;;       :desc "Attach file" "a" 'mml-attach-file
;;       :desc "Send message" "s" 'message-send-and-exit)
#+end_src

We use ~:defer~ here so that we can give the mail address secrets to load later on.

#+begin_src elisp
(use-package! mu4e
  :defer
  :init
  (setq mu4e-maildir "~/.mail"
        mu4e-get-mail-command "mbsync -Va"
        mu4e-update-interval nil
        message-kill-buffer-on-exit t
        ;; mu4e-headers-auto-update nil ; no refresh cos lose current filter
        mu4e-change-filenames-when-moving t ; Preferred for mbsync according to man page.

        ;; Don't bother me with context on startup
        ;; mu4e-context-policy nil

        ;; Attachments
        mu4e-attachment-dir "~/Downloads"
        mu4e-save-multiple-attachments-without-asking t
        mu4e-compose-signature-auto-include nil)

  ;; Display
  (setq message-yank-prefix "")
  (setq message-yank-cited-prefix "")
  (setq message-yank-empty-prefix "")
  (setq message-indentation-spaces 4)
  (setq message-cite-reply-position 'above)
  (setq  message-citation-line-format "On %Y-%m-%d at %R %Z, %f wrote...")

  :config

  ;; SMTP stuff
  (setq send-mail-function 'smtpmail-send-it
        ;; message-send-mail-function 'message-send-mail-with-sendmail
        ;; substitute sendmail with msmtp
        ;; sendmail-program "msmtp"
        ;; allow setting account through email header
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-sendmail-f-is-evil t)

  ;; enable format=flowed
  ;; - mu4e sets up visual-line-mode and also fill (M-q) to do the right thing
  ;; - each paragraph is a single long line; at sending, emacs will add the
  ;;   special line continuation characters.
  ;; - also see visual-line-fringe-indicators setting below
  (setq mu4e-compose-format-flowed t)
  ;; because it looks like email clients are basically ignoring format=flowed,
  ;; let's complicate their lives too. send format=flowed with looong lines. :)
  ;; https://www.ietf.org/rfc/rfc2822.txt
  (setq fill-flowed-encode-column 998)

  (setq mu4e-bookmarks (list (make-mu4e-bookmark
                        :name "Uni Inbox"
                        :query (concat "maildir:/unsw/INBOX OR "
                                        "maildir:/zmail/INBOX")
                        :key ?i)
                        (make-mu4e-bookmark
                        :name "Work Inbox"
                        :query "maildir:/translating/INBOX"
                        :key ?w)
                        ;; (make-mu4e-bookmark
                        ;;  :name "Work Unread"
                        ;;  :query "maildir:/Work/INBOX AND flag:unread"
                        ;;  :key ?q)
                        ;; (make-mu4e-bookmark
                        ;;  :name "All Sent"
                        ;;  :query (concat "\"maildir:/Gmail/[Gmail].Sent Mail\" OR "
                        ;;                 "maildir:/Fastmail/Sent OR "
                        ;;                 "\"maildir:/Work/[Gmail].Sent Mail\"")
                        ;;  :key ?s)
                        (make-mu4e-bookmark
                        :name "Personal Unread"
                        :query (concat "maildir:/gmail/INBOX AND flag:unread OR "
                                        "maildir:/personal/INBOX AND flag:unread")
                        :key ?p))
                        ;; (make-mu4e-bookmark
                        ;;  :name "Personal Archived"
                        ;;  :query (concat "maildir:/Gmail/[Gmail].Archive OR "
                        ;;                 "maildir:/Fastmail/Archive")
                        ;; :key ?a)
                        ))

#+end_src

Attempting to generate email info from pass file instead of revealing email addresses in my configs on github.

#+begin_src elisp
(use-package! auth-source-pass)
(auth-source-pass-enable)

(after! mu4e
  :config
  (setq mail/personal (auth-source-pass-get "user" "email/personal/hotmail")
        mail/translating (auth-source-pass-get "user" "email/work/translating")
        mail/ad (auth-source-pass-get "user" "email/uni/ad")
        mail/student (auth-source-pass-get "user" "email/uni/student")
        domain/personal (auth-source-pass-get "domain" "email/personal/hotmail")
        domain/translating (auth-source-pass-get "domain" "email/work/translating")
        domain/student (auth-source-pass-get "domain" "email/uni/student")))
#+end_src

I guess I could also split on the domain and return the domain that way:
#+begin_src elisp :tangle no
(car (cdr (s-split "@" mail/personal)))
#+end_src

The meat of the config, this block sets up sending from the given addresses

I'm not sure that the =(symbol-value 'x)= syntax is the best way to go about getting the value for the rx, I'll have to investigate.

#+begin_src elisp
(after! mu4e
  :config

  (setq mu4e-contexts
    (list
      (make-mu4e-context
    :name "UNSW"
    :enter-func (lambda () (mu4e-message "Switch to the uni context"))
    :match-func (lambda (msg)
        (when msg
          (mu4e-message-contact-field-matches msg :to (symbol-value 'mail/student))))
      :vars `((user-mail-address . ,mail/student)
              (mu4e-sent-folder . "/unsw/Sent")
              (mu4e-drafts-folder . "/unsw/Drafts")
              (mu4e-trash-folder . "/unsw/Trash")
              (mu4e-refile-folder . "/unsw/Archive")
              (mu4e-sent-messages-behavior . sent)
              (smtpmail-smtp-user . ,mail/ad)
              (smtpmail-local-domain . ,domain/student)
              (smtpmail-default-smtp-server . "smtp.office365.com")
              (smtpmail-smtp-server . "smtp.office365.com")
              (smtpmail-smtp-service . 587)))
        (make-mu4e-context
      :name "personal"
      :enter-func (lambda () (mu4e-message "Switch to the personal context"))
      :match-func (lambda (msg)
        (when msg
          (mu4e-message-contact-field-matches msg :to (symbol-value 'mail/personal))))
      :vars `((user-mail-address . ,mail/personal)
              (mu4e-sent-folder . "/personal/Sent")
              (mu4e-drafts-folder . "/personal/Drafts")
              (mu4e-trash-folder . "/personal/Trash")
              (mu4e-refile-folder . "/personal/Archive")
              (mu4e-sent-messages-behavior . sent)
              ;; (message-send-mail-function . smtpmail-send-it)
              (smtpmail-stream-type . starttls)
              (smtpmail-smtp-user . ,mail/personal) ;
              ;; (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
              (smtpmail-default-smtp-server . "smtp.office365.com")
              (smtpmail-smtp-server . "smtp.office365.com")
              (smtpmail-smtp-service . 587)))
        (make-mu4e-context
          :name "translating"
          :enter-func (lambda () (mu4e-message "Switch to the translation context"))
          :match-func (lambda (msg)
            (when msg
              (mu4e-message-contact-field-matches msg :to (symbol-value 'mail/translating))))
          :vars `((user-mail-address . ,mail/translating)
                  (mu4e-sent-folder . "/translating/Sent")
                  (mu4e-drafts-folder . "/translating/Drafts")
                  (mu4e-trash-folder . "/translating/Trash")
                  (mu4e-refile-folder . "/translating/Archive")
                  (mu4e-sent-messages-behavior . sent)
                  ;; (message-send-mail-function . smtpmail-send-it)
                  (smtpmail-stream-type . ssl)
                  (smtpmail-smtp-user . ,mail/translating)
                  (smtpmail-local-domain . ,domain/translating)
                  (smtpmail-default-smtp-server . "smtp.fastmail.com")
                  (smtpmail-smtp-server . "smtp.fastmail.com")
                  (smtpmail-smtp-service . 465)))))
  )
#+end_src

*** Installing mu4e on a new machine
:PROPERTIES:
:CREATED:  [2020-08-03 Mon 17:53]
:ID:       7a1a121e-7e31-4890-b753-d77f9b4ddda1
:END:
**** Copy over config + maildir
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       8699b9b3-8eb6-4e94-8aea-3fa07e72dbac
:END:
After importing and trusting GPG2 keys, then copy everything over and run
~isync~ to sync folders

#+begin_src shell
  scp corewolf:~/.mbsyncrc ~/
  scp -r corewolf:~/.Maildir ~/
  scp -r corewolf:~/.mbsyncrc ~/
#+end_src
**** Rebuild mu
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       56c06253-bce6-48ee-81e0-6a589c60c6da
:END:
mu index --rebuild --maildir=~/.Maildir

**** Get new app password from hotmail
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       c4b8f685-9f94-415d-8e4b-9fe35a29479e
:END:
1. https://account.microsoft.com/security
2. Select More security options
3. App passwords -> Create new app password
4. Copy to .authinfo.gpg

**** Then run mbsync
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       0e0363e7-43e2-4fc3-8fef-d57375d06d0c
:END:
mbsync

**** Automatic sync
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       ba126c27-44d3-470d-9714-2ef9ed554927
:END:
https://www.reddit.com/r/archlinux/comments/9wrpsj/recommendations_for_background_imap_sync/ea2ax9k/

I use isync (much faster than offlineimap), and I have a systemd service/timer that runs mbsync -a every 3 minutes. It's easy. You just need to create two files:

    ~/.config/systemd/user/mbsync.timer

    #+begin_src conf
     [Unit]
     Description=Mailbox sync (mbsync) timer

     [Timer]
     OnCalendar=*:0/3
     Persistent=true
     Unit=mbsync.service

     [Install]
     WantedBy=timers.target
    #+end_src

    ~/.config/systemd/user/mbsync.service

    #+begin_src conf
     [Unit]
     Description=Mailbox sync (mbsync)

     [Service]
     Type=oneshot
     ExecStart=/usr/bin/mbsync -a
    #+end_src

These are user-level (located in ~/.config/systemd, not /etc/systemd), so you enable/start/stop them using the --user flag:

#+begin_src sh
systemctl --user enable mbsync.timer
#+end_src

(You could also place them in /etc/systemd, but I like user-based services/timers to be user-controlled.)

See man systemd.time for the syntax on calendar events. For example, you could use OnCalendar=minutely for every minute, or =hourly for every hour, and so on.

***** More manageable:
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       01eca56a-caf9-43bf-a2a4-d2ddbfb53f80
:END:
add ~alias wt='watch -n1 systemctl --user list-timers'~ to .bashrc

it runs ~systemctl --user list-timers~ every 1 second, producing something like:

Every 1.0s: systemctl --user list-timers

NEXT                         LEFT          LAST                         PASSED  UNIT               ACTIVATES
Mon 2018-11-19 23:58:00 CET  19s left      Mon 2018-11-19 23:57:02 CET  37s ago battery-warn.timer battery-warn.service
Mon 2018-11-19 23:58:00 CET  19s left      Mon 2018-11-19 23:57:02 CET  37s ago weather.timer      weather.service
Tue 2018-11-20 00:00:00 CET  2min 19s left Mon 2018-11-19 23:57:02 CET  37s ago mbsync.timer       mbsync.service
Tue 2018-11-20 01:56:57 CET  1h 59min left Mon 2018-11-19 23:56:57 CET  42s ago updates.timer      updates.service

4 timers listed.
Pass --all to see loaded but inactive timers, too.

You can also use all the other systemctl commands, like checking whether there was any failure (--failed), running a service ad hoc (instead of waiting for the timer), disabling a timer, and so on.

Basically, it seemed to me that the systemd ecosystem is generally better for all this sort of stuff than cronjobs, which are comparatively simplistic.

**** Programmimatically send emails with mu4e
:PROPERTIES:
:CREATED:  [2020-05-28 Thu 10:06]
:ID:       bf470fb3-eeb0-413a-aa56-93cfa68e0981
:END:
:RESOURCES:
- [[https://www.reddit.com/r/emacs/comments/g4svr2/programmatically_send_emails_with_mu4e/][Programmatically send emails with mu4e : emacs]]
:END:

** email old
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       9d70eb02-b426-4f1b-94d2-aba8ab6d32b4
:END:
*** Automatic sync
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       c6655f45-3b30-4a10-8e7e-8c8aaf1824a8
:END:
~/.scripts/cron/mbsyncsync.sh?

**** Make executable, add to crontab:
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       965a487e-edbd-412c-85ce-682842a5b594
:END:
chmod a+x /home/mylocaluser/scripts/offlineimap.sh
crontab -e

*/5 * * * * /home/$USER/.scripts/offlineimapsync.sh

*** mu4e Issues
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       5663285a-b81b-4b2c-b6c1-55f356da80d8
:END:
offlineimap seems to be having trouble with my (RemoteZmail) UNSW accounts. The fix on the
offlineimap page works:
https://www.offlineimap.org/doc/FAQ.html#what-is-the-uid-validity-problem-for-folder

#+begin_src sh
mv ~/.offlineimap/Account-zmail ~/.archives
mv ~/.offlineimap/Repository-RemoteZmail ~/.archives
mv ~/.offlineimap/Repository-LocalZmail ~/.archives
#+end_src

For UNSW

#+begin_src sh
mv ~/.offlineimap/Account-UNSW ~/.archives
mv ~/.offlineimap/Repository-RemoteUNSW ~/.archives
mv ~/.offlineimap/Repository-LocalUNSW ~/.archives
#+end_src

For dotranslating:

#+begin_src sh
mv ~/.offlineimap/Account-UNSW ~/.archives
mv ~/.offlineimap/Repository-RemoteUNSW ~/.archives
mv ~/.offlineimap/Repository-LocalUNSW ~/.archives
#+end_src

And the you may have to run
#+begin_src sh
mu index --rebuild --maildir ~/.mail/
#+end_src

* Japanese input
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       2cf8ddf9-15cc-45c4-9bdd-16a6b6c514e8
:END:
** uim
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       83d5d298-e2bc-4adf-becc-1a1827b4a1fb
:END:
OK FINAL ITS UIM ALL THE WAY
https://wiki.archlinux.jp/index.php/Uim_%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%82%92%E5%85%A5%E5%8A%9B
https://wiki.archlinux.jp/index.php/Mozc#uim

May need to run to allow editing. This seems to be saved somewhere locally that persists across installs. (is there a yay config file?)
#+begin_src sh
yay --editmenu --nodiffmenu --save # to allow editing of the PGKBUILD
#+end_src

#+begin_src sh
yay --save --sudoloop
#+end_src shell

The key (would it be possible to put this in an interactive shell script?:
#+begin_src sh
yay -S uim-mozc-ut2 --answerclean All --answeredit All
#+end_src

#+begin_example
## If you will be using mozc.el on Emacs, uncomment below.
_emacs_mozc="yes"
#+end_example

then ~C-x #~ to get through edits
There is a password at the end of the install that times out if left.

after each install you need to re-register mozc
#+begin_src sh
sudo uim-module-manager --register mozc
#+end_src

This will allow you to choose ~mozc~ from the ~uim-pref-gtk3~ gui.

Then you need to set default input method as direct or an English one, and mozc
as the alternate one.

If it doesn't fucking work just keep re-installing it. Oh and also do the
Japanese locale thingy
*** TODO Add japanese locale settings
:PROPERTIES:
:CREATED:  [2021-01-20 Wed 13:18]
:ID:       b2b12548-74c2-45a8-9116-f46f9bc74ebe
:END:

* install
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       ce3c3570-add3-40bf-b000-078f57237bb7
:END:

** Environment
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       2b9760a3-1431-4c72-a656-bc0e8e4188ec
:END:
*** xfce4
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       f55fc599-256d-4787-8737-60a44f5b9827
:END:

Need to have a more robust xfce4 setup. Having to manually add emacs and other startup programs is a PITA. Looks like I may be able to use .xprofile to do this similar to xinit

**** xfconf-query
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       aba04815-39ef-4d9e-83ea-e29807a70388
:END:

Auto get rid of xfce4-panel
- Auto set Ubuntu Mono Regular as default font
- Auto set Ant-Dracula-Master as Theme
- Auto set Papirus-Dark as Icons

**** Auto-start applications
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       3144361c-bdfa-44d6-aef6-0bcf6736c3a7
:END:
These text files can be git repo'd across machines.
~/.config/autostart/

*** systemd
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       70080382-b74d-4b35-8495-9af325129c14
:END:
What services do I have?
- syncthing

** 3. Copy files back if necessary
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       853e21d3-4c6f-4778-a958-8cb4b1c53cfa
:END:

(remember it goes from root then home/x file)

#+begin_src sh
cd /
borgmatic -x --archive volk-lappy-2019-08-31T21:53:28.227674 --restore-path /home/volk/
#+end_src

**** TODO script backup of paths from latest backup
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       999f5876-09bc-4bda-80e2-85372b6296d9
:END:

** 3. Reconfigure authentication
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       82c951e6-cc6b-4200-a8f6-b0ebeca8a3eb
:END:

*** GPG2
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       df0af87f-95e0-4453-9b07-22d78724b6cf
:END:
https://www.phildev.net/pgp/gpg_moving_keys.html
Backup old key
Import key into new system

Copy All GnuPG Data

Your first choice is to copy all of your GnuPG data. This is a lot more data than just your key, but is still likely to be under 5MB. This method will copy all of your keys, everyone's key you
have, and your entire trust database. It's ideal for backup, or for moving to a new computer. Simply copy all the contents of your GnuPG data directory, which would be as follows:

  • Windows: C:/Documents and Settings/username/application Data/GnuPG
  • Unix/Linux/Mac: ~/.gnupg

#+begin_src sh
scp -r corewolf:~/.password-store ~/
#+end_src

* Ricing
:PROPERTIES:
:CREATED:  [2020-07-28 Tue 11:43]
:ID:       57053231-94a6-4d1f-b28a-415d1f7d2661
:END:
:RESOURCES:
- [[https://github.com/khanhas/spicetify-cli][GitHub - khanhas/spicetify-cli: Commandline tool to customize Spotify client]]
:END:
Setup theming for applications outside of emacs. Perhaps later I can incorporate a scripted way to change gtk colours, icons etc according to Emacs theme.
Looks like a solution to this is [[github:https://github.com/jcaw/theme-magic][theme-magic]

~theme-magic~ only affects colour, not font size and the rest...
A solution maybe to use babel to create a variable which is written to .Xresources to set a global font. See more here: https://www.emacswiki.org/emacs/SetFonts
** .Xresources
:PROPERTIES:
:CREATED:  [2020-07-28 Tue 11:44]
:ID:       a97322e1-cb4d-4e78-afc6-ff410ff35202
:header-args:bash: :tangle ~/.Xresources
:END:
#+begin_src css
! Dracula Xresources palette
*.font:	Ubuntu Mono:pixelsize=15:antialias=true:autohint=true;
*.foreground: #F8F8F2
*.background: #282A36
*.color0:     #000000
*.color8:     #4D4D4D
*.color1:     #FF5555
*.color9:     #FF6E67
*.color2:     #50FA7B
*.color10:    #5AF78E
*.color3:     #F1FA8C
*.color11:    #F4F99D
*.color4:     #BD93F9
*.color12:    #CAA9FA
*.color5:     #FF79C6
*.color13:    #FF92D0
*.color6:     #8BE9FD
*.color14:    #9AEDFE
*.color7:     #BFBFBF
*.color15:    #E6E6E6
#+end_src

** .Xdefaults
:PROPERTIES:
:CREATED:  [2020-07-28 Tue 11:44]
:header-args:bash: :tangle ~/.Xdefaults
:ID:       eb7f25c2-0d6a-4b33-ad84-d92c4864ab6a
:END:
#+begin_src css
*foreground: #00cc00
*foreground_bold: #a8a19f
*cursor: #a8a19f
*background:       #1b1918
!!*background: rgba(0, 0, 0, .7)

!! black
*color0: #1b1918
*color8: #766e6b
!! red
*color1: #f22c40
*color9: #f22c40
!! green
*color2: #5ab738
*color10: #5ab738
!! yellow
*color3: #d5911a
*color11: #d5911a
!! blue
*color4: #407ee7
*color12: #407ee7
!! magenta
*color5: #6666ea
*color13: #6666ea
!! cyan
*color6: #00ad9c
*color14: #00ad9c
!! white
*color7: #a8a19f
*color15: #f1efee

URxvt.intensityStyles:	false
URxvt.background:       [70]#000000
URxvt.depth:		32
URxvt.font: 		xft:monospace:size=11
URxvt.scrollBar:	false
URxvt.cursorColor:	white

!! Extensions
URxvt.perl-ext-common:	default,matcher,resize-font,url-select,keyboard-select
URxvt.colorUL:		#4682B4
!! url-select
URxvt.keysym.M-u:	perl:url-select:select_next
URxvt.url-select.launcher: linkhandler
URxvt.url-select.underline: true
!! keyboard-select:
URxvt.keysym.M-Escape: perl:keyboard-select:activate
!! resize-font
URxvt.resize-font.smaller:	C-Down
URxvt.resize-font.bigger:	C-Up
!! Matcher
URxvt.url-launcher:	linkhandler
URxvt.matcher.button:	1

rofi.color-enabled:	true
rofi.color-window:	#000, #000, #000
rofi.color-normal:	#111, #819396, #222, #008ed4, #ffffff
rofi.color-active:	#002b37, #008ed4, #003643, #008ed4, #66c6ff
rofi.color-urgent:	#002b37, #da4281, #003643, #008ed4, #890661

rofi.fake-transparency:	true
rofi.lines:		3
rofi.bw:		0
rofi.opacity:		"10"
rofi.hide-scrollbar:	true
rofi.width:		30
*.color15:    #E6E6E6
#+end_src

** .xprofile
:PROPERTIES:
:CREATED:  [2020-07-29 Wed 15:24]
:ID:       86962c3e-5fb1-4fb3-92bb-48c8391eb71c
:header-args:bash: :tangle ~/.xprofile
:END:

It may/may not be a good idea to have this here, maybe just seperate out the visual aspects?

#+begin_src bash
##!/bin/sh
## This file is sourced by some DM and should not contain any desktop execution.

# Testing for EXWM startup
# (This is used for display manager startups)

export LC_CTYPE=ja_JP.UTF-8
# export LANG="ja_JP.UTF-8"
# export XMODIFIERS="@im=ibus"
# export XMODIFIER="@im=ibus"
# export GTK_IM_MODULE=ibus
# export QT_IM_MODULE=ibus
# export DefaultIMModule=ibus
# ibus-daemon -drx
export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS=@im=fcitx

# export GTK_IM_MODULE='uim'
# export QT_IM_MODULE='uim'
# uim-xim &
# export XMODIFIERS='@im=uim'

# exec emacs --daemon -f exwm-enable &
# exec emacsclient -c &
# sh -c "sleep 10 && emacsclient -c" &
# xrdb -I$HOME ~/.Xresources &
# ~/.scripts/panel |lemonbar  -B '#2f2f2f' -F '#dcdccc' -g 1920 -f "Monospace-10" &
#+end_src

To allow theme-magic changes to be persist across sessions we need this to run at startup:

#+begin_src bash
wal -r
#+end_src

Remember that wallpapers will have to be set first, but as Emacs fonting also becomes transparent there is no point to having a wallpaper under EXWM.

#+begin_src bash
picom &
# exec emacsclient -a "" -c &
fcitx5 &
syncthing &
unclutter &
redshift &
uim-toolbar-gtk3-systray &
feh --bg-scale ~/Pictures/Backgrounds/deskwall.jpg --bg-fill ~/Pictures/Backgrounds/portrait.jpg &

setxkbmap -layout us -option "caps:swapescape"
#+end_src

** Unixporn
:PROPERTIES:
:CREATED:  [2020-05-28 Thu 11:18]
:ID:       e5d22834-5294-4ed5-82f3-f56008a0ffa4
:END:
*** u/JavaCafe01
:PROPERTIES:
:CREATED:  [2020-05-28 Thu 11:18]
:ID:       9082a549-df6d-4ac7-860b-ac2f87547194
:END:
:RESOURCES:
- [[https://github.com/JavaCafe01/dotfiles][GitHub - JavaCafe01/dotfiles: My personal dotfiles for my Arch setup.]]
- [[https://www.reddit.com/r/unixporn/comments/gfbuk3/bspwm_snowy_mountains/][{bspwm} Snowy Mountains : unixporn]]
:END:
** DM
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       d7a6bc82-d382-4b75-a64d-25c3c1c939a8
:END:
Use SDDM
https://wiki.archlinux.org/index.php/Display_manager
https://aur.archlinux.org/packages/sddm-sugar-dark/
https://github.com/MarianArlt/sddm-sugar-dark

Then config in /usr/share/sddm/themes/sugar-dark/theme.conf

** Then install ant-dracula theme for GTK in ~/.themes (should be git reved)
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       0aecae68-746a-434b-99bf-8d836085a80a
:END:

Does theme-magic work for xfce4?

- Following command changes the folder colour in Papirus theme (need to change in Manjaro settings)

#+begin_src bash
yay -S papirus-folders-git &&
papirus-folders -C pink --theme Papirus-Dark
#+end_src

** Compton
:PROPERTIES:
:CREATED:  [2020-08-20 Thu 13:32]
:ID:       4fb3e272-4bac-4ebb-9d3a-7443e7ba8f2e
:END:
I wonder if fonts are still transparent under Emacs 27?
[[https://www.masteringemacs.org/article/whats-new-in-emacs-27-1][What's new in Emacs 27]].

*** TODO Cleanup compton config
:PROPERTIES:
:CREATED:  [2020-08-20 Thu 13:40]
:ID:       a6bbe7ab-724f-45ba-88bf-0131e7edce41
:END:
#+begin_src conf
# Shadow
shadow = true;
no-dnd-shadow = true;
no-dock-shadow = true;
shadow-radius = 7;
shadow-offset-x = -7;
shadow-offset-y = -7;
shadow-exclude = [
	"name = 'Notification'",
	"class_g = 'Conky'",
	"class_g ?= 'Notify-osd'",
	"class_g = 'Cairo-clock'",
	"_GTK_FRAME_EXTENTS@:c"
];

# Opacity
menu-opacity = 1;
inactive-opacity = 1;
frame-opacity = 0.7;
inactive-opacity-override = false;
# alpha-step = 0.06;
blur-kern = "3x3box";
blur-background-exclude = [
	"window_type = 'dock'",
	"window_type = 'desktop'",
	"_GTK_FRAME_EXTENTS@:c"
];

# Fading
fading = true;
fade-in-step = 0.08;
fade-out-step = 0.08;
fade-exclude = [ ];

# Other
backend = "xrender";
mark-wmwin-focused = true;
mark-ovredir-focused = true;
detect-rounded-corners = true;
detect-client-opacity = true;
refresh-rate = 0;
vsync = "true";
dbe = false;
detect-transient = true;
detect-client-leader = true;
invert-color-include = [ ];

# GLX backend
glx-copy-from-front = false;
# glx-swap-method = "undefined";

# Window type settings
wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.75; focus = true; };
};
#+end_src

*** Compton is now picom
:PROPERTIES:
:CREATED:  [2020-12-09 Wed 16:35]
:ID:       4adb4467-5008-4678-89ca-a1615f3e491d
:header-args: :tangle ~/.config/picom.conf :mkdirp yes
:END:

#+begin_src conf
#################################
#
# Backend
#
#################################

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
backend = "glx";
#backend = "xrender"

#################################
#
# GLX backend
#
#################################

glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# Overrides --glx-copy-from-front.
# glx-use-copysubbuffermesa = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
# glx-no-rebind-pixmap = true;

# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
#glx-swap-method = "undefined";

#################################
#
# Shadows
#
#################################

# Enabled client-side shadows on windows.
shadow = true;
# The blur radius for shadows. (default 12)
shadow-radius = 5;
# The left offset for shadows. (default -15)
shadow-offset-x = -5;
# The top offset for shadows. (default -15)
shadow-offset-y = -5;
# The translucency for shadows. (default .75)
shadow-opacity = 0.5;

log-level = "warn";
#change your username here
#log-file = "/home/erik/.config/compton.log";

# Set if you want different colour shadows
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;

# The shadow exclude options are helpful if you have shadows enabled. Due to the way compton draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.
shadow-exclude = [
    "name = 'Notification'",
    "name = 'Plank'",
    "name = 'Docky'",
    "name = 'Kupfer'",
    "name = 'xfce4-notifyd'",
    "name *= 'VLC'",
    "name *= 'compton'",
    "name *= 'picom'",
    "name *= 'Chromium'",
    "name *= 'Chrome'",
    "class_g = 'Firefox' && argb",
    "class_g = 'Conky'",
    "class_g = 'Kupfer'",
    "class_g = 'Synapse'",
    "class_g ?= 'Notify-osd'",
    "class_g ?= 'Cairo-dock'",
    "class_g = 'Cairo-clock'",
    "class_g ?= 'Xfce4-notifyd'",
    "class_g ?= 'Xfce4-power-manager'",
    "_GTK_FRAME_EXTENTS@:c",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
];
# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = false;

#################################
#
# Opacity
#
#################################

inactive-opacity = 1;
active-opacity = 1;
frame-opacity = 1;
inactive-opacity-override = false;

# Dim inactive windows. (0.0 - 1.0)
# inactive-dim = 0.2;
# Do not let dimness adjust based on window opacity.
# inactive-dim-fixed = true;
# Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
# blur-background = true;
# Blur background of opaque windows with transparent frames as well.
# blur-background-frame = true;
# Do not let blur radius adjust based on window opacity.
blur-background-fixed = false;
blur-background-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'",
    "_GTK_FRAME_EXTENTS@:c"
];

#################################
#
# Fading
#
#################################

# Fade windows during opacity changes.
fading = true;
# The time between steps in a fade in milliseconds. (default 10).
fade-delta = 4;
# Opacity change between steps while fading in. (default 0.028).
fade-in-step = 0.03;
# Opacity change between steps while fading out. (default 0.03).
fade-out-step = 0.03;
# Fade windows in/out when opening/closing
# no-fading-openclose = true;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [ ];

#################################
#
# Other
#
#################################

# Try to detect WM windows and mark them as active.
mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = true;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;
# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, picom will try detecting this with X RandR extension.
refresh-rate = 0;

# Vertical synchronization: match the refresh rate of the monitor
# this breaks transparency in virtualbox - put a "#" before next line to fix that
vsync = true;

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = false;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
#sw-opti = true;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
unredir-if-possible = false;

# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [ ];

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;

#################################
#
# Window type settings
#
#################################

wintypes:
{
  tooltip = { fade = true; shadow = true; opacity = 0.9; focus = true;};
  dock = { shadow = false; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.9; }
  dropdown_menu = { opacity = 0.9; }
};

######################
#
# XSync
# See: https://github.com/yshui/compton/commit/b18d46bcbdc35a3b5620d817dd46fbc76485c20d
#
######################

# Use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX backend for some users.
xrender-sync-fence = true;
#+end_src

* Applications
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       981136f9-d5f2-4eb0-ae8d-0cfe748fa2b0
:END:
https://ambrevar.xyz/power-apps/
** mps-youtube
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       d9700cde-4be4-4477-9088-4866ef9a2e08
:END:
quick fix until this is patched, you can just edit the line in util.py to be qs['key'] = "yourapikey"

mpsyt set api_key YOUR_NEW_API_KEY
** dunst
:PROPERTIES:
:CREATED:  [2021-08-13 Fri 13:00]
:ID:       9ad2583c-f1e1-4d98-9304-9e587fabda97
:END:

#+begin_src conf :tangle ~/.config/dunst/dunstrc
[global]
    monitor = 0
    follow = keyboard
    geometry = "350x5-0+24"
    indicate_hidden = yes
    shrink = yes
    transparency = 20
    notification_height = 0
    separator_height = 2
    padding = 0
    horizontal_padding = 8
    frame_width = 3
    frame_color = "#282828"

    # Define a color for the separator.
    # possible values are:
    #  * auto: dunst tries to find a color fitting to the background;
    #  * foreground: use the same color as the foreground;
    #  * frame: use the same color as the frame;
    #  * anything else will be interpreted as a X color.
    separator_color = frame

    # Sort messages by urgency.
    sort = yes

    idle_threshold = 120
    font = Monospace 14
    line_height = 0
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    format = "<b>%s</b>\n%b"

    alignment = left
    show_age_threshold = 60
    word_wrap = yes
    ellipsize = middle
    ignore_newline = no
    stack_duplicates = true
    hide_duplicate_count = true
    show_indicators = yes
    icon_position = left
    max_icon_size = 40
    #icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/:/usr/share/icons/Adwaita/256x256/status/
    sticky_history = yes
    history_length = 20
    dmenu = /usr/bin/dmenu -p dunst:
    browser = /usr/bin/firefox -new-tab

    # Always run rule-defined scripts, even if the notification is suppressed
    always_run_script = true

    title = Dunst
    class = Dunst
    startup_notification = false
    force_xinerama = false
[experimental]
    per_monitor_dpi = false

[shortcuts]
    close = ctrl+space
    close_all = ctrl+shift+space
    history = ctrl+grave
    context = ctrl+shift+period

[urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    background = "#282828"
    foreground = "#928374"
    timeout = 5
    # Icon for notifications with low urgency, uncomment to enable
    #icon = /path/to/icon

[urgency_normal]
    background = "#458588"
    foreground = "#ebdbb2"
    timeout = 5

[urgency_critical]
    background = "#cc2421"
    foreground = "#ebdbb2"
    frame_color = "#fabd2f"
    timeout = 0

# Every section that isn't one of the above is interpreted as a rules to
# override settings for certain messages.
# Messages can be matched by "appname", "summary", "body", "icon", "category",
# "msg_urgency" and you can override the "timeout", "urgency", "foreground",
# "background", "new_icon" and "format".
# Shell-like globbing will get expanded.
#
# SCRIPTING
# You can specify a script that gets run when the rule matches by
# setting the "script" option.
# The script will be called as follows:
#   script appname summary body icon urgency
# where urgency can be "LOW", "NORMAL" or "CRITICAL".
#
# NOTE: if you don't want a notification to be displayed, set the format
# to "".
# NOTE: It might be helpful to run dunst -print in a terminal in order
# to find fitting options for rules.

#[espeak]
#    summary = "*"
#    script = dunst_espeak.sh

#[script-test]
#    summary = "*script*"
#    script = dunst_test.sh

#[ignore]
#    # This notification will not be displayed
#    summary = "foobar"
#    format = ""

#[history-ignore]
#    # This notification will not be saved in history
#    summary = "foobar"
#    history_ignore = yes

#[signed_on]
#    appname = Pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = Pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = Pidgin
#    summary = *says*
#    urgency = critical
#
#[twitter]
#    appname = Pidgin
#    summary = *twitter.com*
#    urgency = normal
#
# vim: ft=cfg
#+end_src

** Firefox
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       5d7c0a82-1a0b-4053-ac28-faca54d6fb88
:END:
*** Enable UserChrome.css and userContent.css
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       9dbc41ea-0045-4705-9dd9-a91608a89c4f
:END:
Set ~toolkit.legacyUserProfileCustomizations.stylesheets~ to ~true~ in ~about:config~

#+begin_src conf :tangle ~/.local/share/applications/firefox.desktop
[Desktop Entry]
Name=Firefox
Exec=firefox
Icon=firefox-icon
Type=Application
Terminal=false
Categories=Network;WebBrowser
#+end_src

** Polybar
:PROPERTIES:
:CREATED:  [2020-05-19 Tue 17:58]
:ID:       a2054cc6-9860-4011-b06e-ad22529fffb3
:END:
:RESOURCES:
- [[https://github.com/polybar/polybar/pull/1615][{WIP} Fix tray restacking issues by patrick96 · Pull Request #1615 · polybar]]
:END:

** MS Office setup:
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       f0366432-12da-4523-846b-97f5dd635a6b
:END:

*** setup 32 bit wine:
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       f29db81c-6234-416d-9570-046f953bf6a6
:END:
~WINEPREFIX="/home/user//.wine/prefix32" WINEARCH=win32 wine wineboot~
then
~WINEPREFIX="home/user/.wine/prefix32" winetricks~

and select "Install an application" and choose office2013pro
then add vimexcel

*** Alternative setup?
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       53148f10-2b26-45f6-a275-348cdc03137d
:END:
sudo mkdir /media/x
sudo mount -o loop ~/Templates/Office2016Phgrox86-APR2019/Office16.x86.en-US.ISO /media/x
wine /media/x/setup.exe

or use the winetricks office2013 installer, it works amazingly

*** Play on linux
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       82a93230-8859-4467-a19e-e57105b71cbc
:END:
https://the-eye.eu/public/MSDN/?__cf_chl_jschl_tk__=c693f771e0a98b1532bb076e2dfbd6057755745b-1576642075-0-AUaWoSoyosurGztGwDBPI2dxUPmfnYjmdiMWnEda60BXxtVqUdm6UcIzSCr3T-ZlZJPmQzVriDxRh3xb9jIBXD1K4uAmbK0Kma1a-G8lw6u9U9_1TR5FVfLznm9ThGv7AkA-zQbkoVxtl8YXTy6xvlhl071EHkVulY_PP8NVRklgNAL5ud_WLIOVx68vuCaMN35pHz7kjNuKhaFda18JNCxetSJ94jOqMiOQgrnQ5R07XOlWMpaR4AvxZdNET-yaqpcR886IPU5JlzNnqYDMRZGG6opx2vk5AT7oSHqhsRppLF1KJ69KQTIAUtV270kPg6UNA6pE6clg_SUd_s-aLIk
https://www.reddit.com/r/piracy/wiki/tools

*** Japanese Input:
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       d5099398-1072-4643-b7e2-35244c998c4f
:END:
    To get input in X-applications use mozc-ut2
~yay -S uim-mozc-ut2~

duckduckgo pass: covet wyeth wet hymen
*** Powershell
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       11499d2a-a633-41ec-906f-961d6a62f7c1
:END:
Install powershell and the additional ~dotnet-sdk-2.2~.
Use powershell to run the

** Laptop specific
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       46c3d397-1fc0-4493-b247-20c02d073eda
:END:
*** tlp-stat
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       04335067-fb73-4ac7-8e36-0f78617acb1a
:END:
Install acpi_call kernel module for ThinkPad battery recalibration:
as per https://forum.manjaro.org/t/tlp-query/95234/15
~sudo pacman -S linux419-acpi_call~
** Lockscreen
:PROPERTIES:
:CREATED:  [2021-08-13 Fri 15:17]
:ID:       88013a6a-4961-4b9c-bd29-aecdac20a1ca
:END:
Setup minimal lock screen

#+begin_src conf :tangle ~/.config/betterlockscreenrc
# configuration file for betterlockscreen

insidecolor=00000000
ringcolor=ffffffff
keyhlcolor=d23c3dff
bshlcolor=d23c3dff
separatorcolor=00000000
insidevercolor=00000000
insidewrongcolor=d23c3dff
ringvercolor=ffffffff
ringwrongcolor=ffffffff
verifcolor=ffffffff
timecolor=ffffffff
datecolor=ffffffff
loginbox=00000066
font="sans-serif"
locktext='Type password to unlock...'
lock_timeout=5
time_format='%H:%M:%S'
#+end_src

* Git
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       b7f16a6a-a429-4ec3-aedd-95a10af70301
:END:
** DARBS
:PROPERTIES:
:CREATED:  [2020-05-16 Sat 12:08]
:ID:       999c0e2f-72a0-41dc-a363-428e9538c1ee
:END:
cd ~/.scripts/DARBS
 git remote add origin git@github.com:suiokami/DARBS.git

* Post installation script
:PROPERTIES:
:CREATED:  [2020-12-18 Fri 11:49]
:ID:       be19f074-c30e-4e31-89b9-fd0e280771d4
:header-args:sh: :noweb yes :tangle ~/.scripts/post-install.sh :mkdirp yes
:END:

#+begin_src sh
<<add exwm.desktop>>
#+end_src
